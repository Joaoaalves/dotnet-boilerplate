
services:
  api:
    build:
      context: ./src
      dockerfile: Dockerfile.dev
    container_name: project_api_dev
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5000
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    ports:
      - "5000:5000"
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"] 
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal
      - monitoring
  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: project_docs_dev
    ports:
      - "5001:80"
    volumes:
      - ./docs/_site:/usr/share/nginx/html:ro
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    networks:
      - internal
  
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - internal
      - monitoring
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    profiles: ["observability"]
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      prometheus:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitoring
  prometheus:
    image: prom/prometheus
    profiles: ["observability"]
    ports:
      - "${PROMETHEUS_PORT}:9090"
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - monitoring
  grafana:
    image: grafana/grafana
    profiles: ["observability"]
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./observability/grafana/data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - monitoring
    restart: unless-stopped

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.5.0
    profiles: ["observability"]
    command: '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring

networks:
  internal:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
    driver: local
  prometheus_data:
    driver: local