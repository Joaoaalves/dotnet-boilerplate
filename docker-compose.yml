services:
  api:
    build:
      context: ./src
      dockerfile: Dockerfile
    container_name: project_api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5000
      DATABASE_CONNECTION_STRING: ${DATABASE_CONNECTION_STRING}
    ports:
      - "5000:5000"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - appnet

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: project_docs
    environment:
      - DOMAIN=${DOMAIN}
    ports:
      - "8080:80"
    restart: always
    networks:
      - appnet

  nginx:
    image: nginx:alpine
    container_name: project_nginx
    depends_on:
      - api
      - docs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs
    environment:
      - DOMAIN=${DOMAIN}
    restart: always
    networks:
      - appnet
  migrations:
    build:
      context: ./src
      dockerfile: Project.Infrastructure/Dockerfile
      target: migrations
    environment:
      DATABASE_CONNECTION_STRING: ${DATABASE_CONNECTION_STRING}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
networks:
  appnet:
    driver: bridge

volumes:
  postgres_data: