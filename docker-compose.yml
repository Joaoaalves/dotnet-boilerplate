services:
  api:
    build:
      context: ./src
      dockerfile: Dockerfile
    container_name: project_api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5000
    env_file:
      - .env
    ports:
      - "5000:5000"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - internal

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: project_docs
    environment:
      - DOMAIN=${DOMAIN}
    ports:
      - "8080:80"
    restart: always
    networks:
      - internal

  nginx:
    image: nginx:alpine
    container_name: project_nginx
    depends_on:
      - api
      - docs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs
    environment:
      - DOMAIN=${DOMAIN}
    restart: always
    networks:
      - internal
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    profiles: ["observability"]
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    profiles: ["observability"]
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - internal
    restart: unless-stopped

networks:
  internal:
    driver: bridge

volumes:
  postgres_data:
  grafana_data: