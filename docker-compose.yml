services:
  api:
    build:
      context: ./src
      dockerfile: Dockerfile
    container_name: project_api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5000
    env_file:
      - .env
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - internal
      - monitoring
      - logging
  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: project_docs
    environment:
      - DOMAIN=${DOMAIN}
    restart: always
    networks:
      - internal

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        ENABLE_MONITORING: ${ENABLE_MONITORING}
        ENABLE_LOGGING: ${ENABLE_LOGGING}
    container_name: nginx
    depends_on:
      - api
      - docs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/certbot:/var/www/certbot
      - ./nginx/templates/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    environment:
      DOMAIN: ${DOMAIN}
    restart: always
    networks:
      - internal
      - logging
      - monitoring
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

#
# MONITORING
#
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    profiles: ["monitoring", "observability"]
    environment:
      DATA_SOURCE_NAME: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      prometheus:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitoring
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    profiles: ["monitoring", "observability"]
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    profiles: ["monitoring", "observability"]
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - internal
    restart: unless-stopped
#
# LOGGING
#
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.1
    profiles: ["observability", "logging"]
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - logging
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.1
    profiles: ["observability", "logging"]
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kibana:5601/api/status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  kibana-importer:
    image: curlimages/curl:latest
    profiles: ["observability", "logging"]
    command: 
      - "-X"
      - "POST"
      - "http://kibana:5601/api/saved_objects/_import?overwrite=true"
      - "-H"
      - "kbn-xsrf: true"
      - "--form"
      - "file=@/import/export.ndjson"
    volumes:
      - ./observability/kibana/export.ndjson:/import/export.ndjson:ro
    depends_on:
      kibana:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - logging
    restart: "no"

  logstash:
    image: docker.elastic.co/logstash/logstash:9.1.1
    profiles: ["observability", "logging"]
    volumes:
      - ./observability/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - logging
    restart: unless-stopped
networks:
  internal:
    driver: bridge
  monitoring:
    driver: bridge
  logging:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  elastic_data:
    driver: local