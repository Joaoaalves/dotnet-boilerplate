{
  "api/Project.API.Configurations.CorsConfiguration.html": {
    "href": "api/Project.API.Configurations.CorsConfiguration.html",
    "title": "Class CorsConfiguration | Project",
    "summary": "Class CorsConfiguration Namespace Project.API.Configurations Assembly Project.Api.dll Provides CORS configuration methods for the application. public static class CorsConfiguration Inheritance object CorsConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCorsConfiguration(IServiceCollection) Adds CORS policies to the service collection. public static IServiceCollection AddCorsConfiguration(this IServiceCollection services) Parameters services IServiceCollection The service collection to which the CORS policies will be added. Returns IServiceCollection The same IServiceCollection instance, enabling method chaining. Remarks This method configures two CORS policies: \"CorsPolicy\" Dynamically allows origins based on environment and request origin. In development mode, it allows \"localhost\" and local IPs (192.168.*). In production, it allows only the origin specified in the \"CLIENT_URL\" environment variable. \"PublicPolicy\"Allows any origin, header, and method â€” intended for public access."
  },
  "api/Project.API.Configurations.ExecutionContextAccessor.html": {
    "href": "api/Project.API.Configurations.ExecutionContextAccessor.html",
    "title": "Class ExecutionContextAccessor | Project",
    "summary": "Class ExecutionContextAccessor Namespace Project.API.Configurations Assembly Project.Api.dll Provides access to the current execution context, specifically the correlation ID from the HTTP request. public class ExecutionContextAccessor : IExecutionContextAccessor Inheritance object ExecutionContextAccessor Implements IExecutionContextAccessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecutionContextAccessor(IHttpContextAccessor) Initializes a new instance of the ExecutionContextAccessor class. public ExecutionContextAccessor(IHttpContextAccessor httpContextAccessor) Parameters httpContextAccessor IHttpContextAccessor An accessor to retrieve the current HTTP context. Properties CorrelationId Gets the correlation ID from the incoming HTTP request headers. public Guid CorrelationId { get; } Property Value Guid Exceptions ApplicationException Thrown if the HTTP context or correlation ID is not available in the request. IsAvailable Gets a value indicating whether the HTTP context is currently available. public bool IsAvailable { get; } Property Value bool"
  },
  "api/Project.API.Configurations.html": {
    "href": "api/Project.API.Configurations.html",
    "title": "Namespace Project.API.Configurations | Project",
    "summary": "Namespace Project.API.Configurations Classes CorsConfiguration Provides CORS configuration methods for the application. ExecutionContextAccessor Provides access to the current execution context, specifically the correlation ID from the HTTP request."
  },
  "api/Project.API.SeedWork.BusinessRuleValidationExceptionProblemDetails.html": {
    "href": "api/Project.API.SeedWork.BusinessRuleValidationExceptionProblemDetails.html",
    "title": "Class BusinessRuleValidationExceptionProblemDetails | Project",
    "summary": "Class BusinessRuleValidationExceptionProblemDetails Namespace Project.API.SeedWork Assembly Project.Api.dll Represents a standardized HTTP response for business rule validation exceptions. public class BusinessRuleValidationExceptionProblemDetails : ProblemDetails Inheritance object ProblemDetails BusinessRuleValidationExceptionProblemDetails Inherited Members ProblemDetails.Type ProblemDetails.Title ProblemDetails.Status ProblemDetails.Detail ProblemDetails.Instance ProblemDetails.Extensions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class extends ProblemDetails to provide consistent error responses when a BusinessRuleValidationException is thrown within the domain layer. It sets the HTTP status code to 409 Conflict and includes details from the exception. Constructors BusinessRuleValidationExceptionProblemDetails(BusinessRuleValidationException) Initializes a new instance of the BusinessRuleValidationExceptionProblemDetails class using the provided BusinessRuleValidationException. public BusinessRuleValidationExceptionProblemDetails(BusinessRuleValidationException exception) Parameters exception BusinessRuleValidationException The business rule validation exception containing error details. Remarks The Title is set to \"Business rule validation error\", the Status is set to 409 Conflict, and the Detail is populated with Details."
  },
  "api/Project.API.SeedWork.InvalidCommandProblemDetails.html": {
    "href": "api/Project.API.SeedWork.InvalidCommandProblemDetails.html",
    "title": "Class InvalidCommandProblemDetails | Project",
    "summary": "Class InvalidCommandProblemDetails Namespace Project.API.SeedWork Assembly Project.Api.dll Represents problem details for an InvalidCommandException error. public class InvalidCommandProblemDetails : ProblemDetails Inheritance object ProblemDetails InvalidCommandProblemDetails Inherited Members ProblemDetails.Type ProblemDetails.Title ProblemDetails.Status ProblemDetails.Detail ProblemDetails.Instance ProblemDetails.Extensions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InvalidCommandProblemDetails(InvalidCommandException) Initializes a new instance of the InvalidCommandProblemDetails class using the details from the specified InvalidCommandException. public InvalidCommandProblemDetails(InvalidCommandException exception) Parameters exception InvalidCommandException The exception containing validation failure details."
  },
  "api/Project.API.SeedWork.html": {
    "href": "api/Project.API.SeedWork.html",
    "title": "Namespace Project.API.SeedWork | Project",
    "summary": "Namespace Project.API.SeedWork Classes BusinessRuleValidationExceptionProblemDetails Represents a standardized HTTP response for business rule validation exceptions. InvalidCommandProblemDetails Represents problem details for an InvalidCommandException error."
  },
  "api/Project.Api.Controllers.Users.AccountController.html": {
    "href": "api/Project.Api.Controllers.Users.AccountController.html",
    "title": "Class AccountController | Project",
    "summary": "Class AccountController Namespace Project.Api.Controllers.Users Assembly Project.Api.dll Controller responsible for handling user account-related endpoints such as registration and user info retrieval. [ApiController] [Route(\"/api/\")] public class AccountController : ControllerBase Inheritance object ControllerBase AccountController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountController(QueriesExecutor, CommandsExecutor) Controller responsible for handling user account-related endpoints such as registration and user info retrieval. public AccountController(QueriesExecutor queriesExecutor, CommandsExecutor commandsExecutor) Parameters queriesExecutor QueriesExecutor commandsExecutor CommandsExecutor Methods GetUserInfo() Retrieves information about the currently authenticated user. [HttpGet(\"info\")] [Authorize] public Task<IActionResult> GetUserInfo() Returns Task<IActionResult> Returns 200 OK with user details if authenticated. Returns 401 Unauthorized if the user is not authenticated or not found. Register(RegisterUserCommand) Registers a new user with the provided registration data. [HttpPost(\"register\")] public Task<IActionResult> Register(RegisterUserCommand command) Parameters command RegisterUserCommand The registration command containing user details. Returns Task<IActionResult> Returns 200 OK if registration is successful. Returns 400 Bad Request if validation fails or errors occur during registration."
  },
  "api/Project.Api.Controllers.Users.html": {
    "href": "api/Project.Api.Controllers.Users.html",
    "title": "Namespace Project.Api.Controllers.Users | Project",
    "summary": "Namespace Project.Api.Controllers.Users Classes AccountController Controller responsible for handling user account-related endpoints such as registration and user info retrieval."
  },
  "api/Project.Api.Extensions.SwaggerExtensions.html": {
    "href": "api/Project.Api.Extensions.SwaggerExtensions.html",
    "title": "Class SwaggerExtensions | Project",
    "summary": "Class SwaggerExtensions Namespace Project.Api.Extensions Assembly Project.Api.dll Provides extension methods to configure Swagger for the API. public static class SwaggerExtensions Inheritance object SwaggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSwaggerConfiguration(IServiceCollection) Adds Swagger and OpenAPI configuration to the service collection. public static IServiceCollection AddSwaggerConfiguration(this IServiceCollection services) Parameters services IServiceCollection The service collection to which Swagger services will be added. Returns IServiceCollection The same IServiceCollection instance, allowing method chaining. Remarks This method registers Swagger services including: Swagger generationRegisters Swagger generators and UI endpoints. JWT Bearer authenticationAdds security definitions and requirements for using JWT Bearer tokens in API requests."
  },
  "api/Project.Api.Extensions.html": {
    "href": "api/Project.Api.Extensions.html",
    "title": "Namespace Project.Api.Extensions | Project",
    "summary": "Namespace Project.Api.Extensions Classes SwaggerExtensions Provides extension methods to configure Swagger for the API."
  },
  "api/Project.Application.Configuration.Commands.BaseCommand-1.html": {
    "href": "api/Project.Application.Configuration.Commands.BaseCommand-1.html",
    "title": "Class BaseCommand<TResult> | Project",
    "summary": "Class BaseCommand<TResult> Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public class BaseCommand<TResult> : ICommand<TResult>, IRequest<TResult> Type Parameters TResult Inheritance object BaseCommand<TResult> Implements ICommand<TResult> IRequest<TResult> Derived RegisterUserCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public Guid Id { get; } Property Value Guid"
  },
  "api/Project.Application.Configuration.Commands.Behaviors.ICommandPipelineBehavior-2.html": {
    "href": "api/Project.Application.Configuration.Commands.Behaviors.ICommandPipelineBehavior-2.html",
    "title": "Interface ICommandPipelineBehavior<TCommand, TResult> | Project",
    "summary": "Interface ICommandPipelineBehavior<TCommand, TResult> Namespace Project.Application.Configuration.Commands.Behaviors Assembly Project.Application.dll public interface ICommandPipelineBehavior<TCommand, TResult> where TCommand : ICommand<TResult> Type Parameters TCommand TResult Methods Handle(TCommand, Func<TCommand, Task<TResult>>, CancellationToken) Task<TResult> Handle(TCommand command, Func<TCommand, Task<TResult>> next, CancellationToken cancellationToken) Parameters command TCommand next Func<TCommand, Task<TResult>> cancellationToken CancellationToken Returns Task<TResult>"
  },
  "api/Project.Application.Configuration.Commands.Behaviors.LoggingBehavior-2.html": {
    "href": "api/Project.Application.Configuration.Commands.Behaviors.LoggingBehavior-2.html",
    "title": "Class LoggingBehavior<TCommand, TResult> | Project",
    "summary": "Class LoggingBehavior<TCommand, TResult> Namespace Project.Application.Configuration.Commands.Behaviors Assembly Project.Application.dll public class LoggingBehavior<TCommand, TResult> : ICommandPipelineBehavior<TCommand, TResult> where TCommand : ICommand<TResult> Type Parameters TCommand TResult Inheritance object LoggingBehavior<TCommand, TResult> Implements ICommandPipelineBehavior<TCommand, TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Handle(TCommand, Func<TCommand, Task<TResult>>, CancellationToken) public Task<TResult> Handle(TCommand command, Func<TCommand, Task<TResult>> next, CancellationToken cancellationToken) Parameters command TCommand next Func<TCommand, Task<TResult>> cancellationToken CancellationToken Returns Task<TResult>"
  },
  "api/Project.Application.Configuration.Commands.Behaviors.UserInjectionCommandBehavior-2.html": {
    "href": "api/Project.Application.Configuration.Commands.Behaviors.UserInjectionCommandBehavior-2.html",
    "title": "Class UserInjectionCommandBehavior<TCommand, TResult> | Project",
    "summary": "Class UserInjectionCommandBehavior<TCommand, TResult> Namespace Project.Application.Configuration.Commands.Behaviors Assembly Project.Application.dll public class UserInjectionCommandBehavior<TCommand, TResult> : ICommandPipelineBehavior<TCommand, TResult> where TCommand : ICommand<TResult> Type Parameters TCommand TResult Inheritance object UserInjectionCommandBehavior<TCommand, TResult> Implements ICommandPipelineBehavior<TCommand, TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserInjectionCommandBehavior(IHttpContextAccessor, IUserRepository) public UserInjectionCommandBehavior(IHttpContextAccessor httpContextAccessor, IUserRepository userRepository) Parameters httpContextAccessor IHttpContextAccessor userRepository IUserRepository Methods Handle(TCommand, Func<TCommand, Task<TResult>>, CancellationToken) public Task<TResult> Handle(TCommand command, Func<TCommand, Task<TResult>> next, CancellationToken cancellationToken) Parameters command TCommand next Func<TCommand, Task<TResult>> cancellationToken CancellationToken Returns Task<TResult>"
  },
  "api/Project.Application.Configuration.Commands.Behaviors.html": {
    "href": "api/Project.Application.Configuration.Commands.Behaviors.html",
    "title": "Namespace Project.Application.Configuration.Commands.Behaviors | Project",
    "summary": "Namespace Project.Application.Configuration.Commands.Behaviors Classes LoggingBehavior<TCommand, TResult> UserInjectionCommandBehavior<TCommand, TResult> Interfaces ICommandPipelineBehavior<TCommand, TResult>"
  },
  "api/Project.Application.Configuration.Commands.ICommand-1.html": {
    "href": "api/Project.Application.Configuration.Commands.ICommand-1.html",
    "title": "Interface ICommand<TResult> | Project",
    "summary": "Interface ICommand<TResult> Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public interface ICommand<TResult> : IRequest<TResult> Type Parameters TResult Properties Id Guid Id { get; } Property Value Guid"
  },
  "api/Project.Application.Configuration.Commands.ICommand.html": {
    "href": "api/Project.Application.Configuration.Commands.ICommand.html",
    "title": "Interface ICommand | Project",
    "summary": "Interface ICommand Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public interface ICommand : IRequest<Unit> Properties Id Guid Id { get; } Property Value Guid"
  },
  "api/Project.Application.Configuration.Commands.ICommandHandler-2.html": {
    "href": "api/Project.Application.Configuration.Commands.ICommandHandler-2.html",
    "title": "Interface ICommandHandler<TCommand, TResult> | Project",
    "summary": "Interface ICommandHandler<TCommand, TResult> Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public interface ICommandHandler<in TCommand, TResult> : IRequestHandler<TCommand, TResult> where TCommand : ICommand<TResult> Type Parameters TCommand TResult Inherited Members IRequestHandler<TCommand, TResult>.Handle(TCommand, CancellationToken)"
  },
  "api/Project.Application.Configuration.Commands.InternalCommandBase-1.html": {
    "href": "api/Project.Application.Configuration.Commands.InternalCommandBase-1.html",
    "title": "Class InternalCommandBase<TResult> | Project",
    "summary": "Class InternalCommandBase<TResult> Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public abstract class InternalCommandBase<TResult> : ICommand<TResult>, IRequest<TResult> Type Parameters TResult Inheritance object InternalCommandBase<TResult> Implements ICommand<TResult> IRequest<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InternalCommandBase() protected InternalCommandBase() InternalCommandBase(Guid) protected InternalCommandBase(Guid id) Parameters id Guid Properties Id public Guid Id { get; } Property Value Guid"
  },
  "api/Project.Application.Configuration.Commands.Unit.html": {
    "href": "api/Project.Application.Configuration.Commands.Unit.html",
    "title": "Struct Unit | Project",
    "summary": "Struct Unit Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public readonly struct Unit Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public static readonly Unit Value Field Value Unit"
  },
  "api/Project.Application.Configuration.Commands.UserAwareCommand-1.html": {
    "href": "api/Project.Application.Configuration.Commands.UserAwareCommand-1.html",
    "title": "Class UserAwareCommand<TResult> | Project",
    "summary": "Class UserAwareCommand<TResult> Namespace Project.Application.Configuration.Commands Assembly Project.Application.dll public abstract class UserAwareCommand<TResult> : IUserAware, ICommand<TResult>, IRequest<TResult> Type Parameters TResult Inheritance object UserAwareCommand<TResult> Implements IUserAware ICommand<TResult> IRequest<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public Guid Id { get; } Property Value Guid User public User User { get; } Property Value User Methods InjectUser(User) public void InjectUser(User user) Parameters user User"
  },
  "api/Project.Application.Configuration.Commands.html": {
    "href": "api/Project.Application.Configuration.Commands.html",
    "title": "Namespace Project.Application.Configuration.Commands | Project",
    "summary": "Namespace Project.Application.Configuration.Commands Classes BaseCommand<TResult> InternalCommandBase<TResult> UserAwareCommand<TResult> Structs Unit Interfaces ICommand ICommandHandler<TCommand, TResult> ICommand<TResult>"
  },
  "api/Project.Application.Configuration.DomainEvents.DomainNotificationBase-1.html": {
    "href": "api/Project.Application.Configuration.DomainEvents.DomainNotificationBase-1.html",
    "title": "Class DomainNotificationBase<T> | Project",
    "summary": "Class DomainNotificationBase<T> Namespace Project.Application.Configuration.DomainEvents Assembly Project.Application.dll public class DomainNotificationBase<T> : IDomainEventNotification<T>, IDomainEventNotification, INotification where T : IDomainEvent Type Parameters T Inheritance object DomainNotificationBase<T> Implements IDomainEventNotification<T> IDomainEventNotification INotification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainNotificationBase(T) public DomainNotificationBase(T domainEvent) Parameters domainEvent T Properties DomainEvent [JsonIgnore] public T DomainEvent { get; } Property Value T Id public Guid Id { get; } Property Value Guid"
  },
  "api/Project.Application.Configuration.DomainEvents.IDomainEventNotification-1.html": {
    "href": "api/Project.Application.Configuration.DomainEvents.IDomainEventNotification-1.html",
    "title": "Interface IDomainEventNotification<TEventType> | Project",
    "summary": "Interface IDomainEventNotification<TEventType> Namespace Project.Application.Configuration.DomainEvents Assembly Project.Application.dll public interface IDomainEventNotification<TEventType> : IDomainEventNotification, INotification Type Parameters TEventType Inherited Members IDomainEventNotification.Id Properties DomainEvent TEventType DomainEvent { get; } Property Value TEventType"
  },
  "api/Project.Application.Configuration.DomainEvents.IDomainEventNotification.html": {
    "href": "api/Project.Application.Configuration.DomainEvents.IDomainEventNotification.html",
    "title": "Interface IDomainEventNotification | Project",
    "summary": "Interface IDomainEventNotification Namespace Project.Application.Configuration.DomainEvents Assembly Project.Application.dll public interface IDomainEventNotification : INotification Properties Id Guid Id { get; } Property Value Guid"
  },
  "api/Project.Application.Configuration.DomainEvents.html": {
    "href": "api/Project.Application.Configuration.DomainEvents.html",
    "title": "Namespace Project.Application.Configuration.DomainEvents | Project",
    "summary": "Namespace Project.Application.Configuration.DomainEvents Classes DomainNotificationBase<T> Interfaces IDomainEventNotification IDomainEventNotification<TEventType>"
  },
  "api/Project.Application.Configuration.IExecutionContextAccessor.html": {
    "href": "api/Project.Application.Configuration.IExecutionContextAccessor.html",
    "title": "Interface IExecutionContextAccessor | Project",
    "summary": "Interface IExecutionContextAccessor Namespace Project.Application.Configuration Assembly Project.Application.dll public interface IExecutionContextAccessor Properties CorrelationId Guid CorrelationId { get; } Property Value Guid IsAvailable bool IsAvailable { get; } Property Value bool"
  },
  "api/Project.Application.Configuration.Queries.Behaviors.UserInjectionQueryBehavior-2.html": {
    "href": "api/Project.Application.Configuration.Queries.Behaviors.UserInjectionQueryBehavior-2.html",
    "title": "Class UserInjectionQueryBehavior<TQuery, TResult> | Project",
    "summary": "Class UserInjectionQueryBehavior<TQuery, TResult> Namespace Project.Application.Configuration.Queries.Behaviors Assembly Project.Application.dll public class UserInjectionQueryBehavior<TQuery, TResult> : IRequestPipelineBehavior<TQuery, TResult> where TQuery : IRequest<TResult> Type Parameters TQuery TResult Inheritance object UserInjectionQueryBehavior<TQuery, TResult> Implements IRequestPipelineBehavior<TQuery, TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserInjectionQueryBehavior(IHttpContextAccessor, UserManager<User>) public UserInjectionQueryBehavior(IHttpContextAccessor httpContextAccessor, UserManager<User> userManager) Parameters httpContextAccessor IHttpContextAccessor userManager UserManager<User> Methods Handle(TQuery, Func<Task<TResult>>, CancellationToken) public Task<TResult> Handle(TQuery query, Func<Task<TResult>> next, CancellationToken cancellationToken) Parameters query TQuery next Func<Task<TResult>> cancellationToken CancellationToken Returns Task<TResult>"
  },
  "api/Project.Application.Configuration.Queries.Behaviors.html": {
    "href": "api/Project.Application.Configuration.Queries.Behaviors.html",
    "title": "Namespace Project.Application.Configuration.Queries.Behaviors | Project",
    "summary": "Namespace Project.Application.Configuration.Queries.Behaviors Classes UserInjectionQueryBehavior<TQuery, TResult>"
  },
  "api/Project.Application.Configuration.Queries.IQuery-1.html": {
    "href": "api/Project.Application.Configuration.Queries.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Project",
    "summary": "Interface IQuery<TResult> Namespace Project.Application.Configuration.Queries Assembly Project.Application.dll public interface IQuery<TResult> : IRequest<TResult> Type Parameters TResult"
  },
  "api/Project.Application.Configuration.Queries.IQueryHandler-2.html": {
    "href": "api/Project.Application.Configuration.Queries.IQueryHandler-2.html",
    "title": "Interface IQueryHandler<TQuery, TResult> | Project",
    "summary": "Interface IQueryHandler<TQuery, TResult> Namespace Project.Application.Configuration.Queries Assembly Project.Application.dll public interface IQueryHandler<in TQuery, TResult> : IRequestHandler<TQuery, TResult> where TQuery : IQuery<TResult> Type Parameters TQuery TResult Inherited Members IRequestHandler<TQuery, TResult>.Handle(TQuery, CancellationToken)"
  },
  "api/Project.Application.Configuration.Queries.UserAwareQuery-1.html": {
    "href": "api/Project.Application.Configuration.Queries.UserAwareQuery-1.html",
    "title": "Class UserAwareQuery<TResult> | Project",
    "summary": "Class UserAwareQuery<TResult> Namespace Project.Application.Configuration.Queries Assembly Project.Application.dll public class UserAwareQuery<TResult> : IUserAware, IQuery<TResult>, IRequest<TResult> Type Parameters TResult Inheritance object UserAwareQuery<TResult> Implements IUserAware IQuery<TResult> IRequest<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties User public User User { get; } Property Value User Methods InjectUser(User) public void InjectUser(User user) Parameters user User"
  },
  "api/Project.Application.Configuration.Queries.html": {
    "href": "api/Project.Application.Configuration.Queries.html",
    "title": "Namespace Project.Application.Configuration.Queries | Project",
    "summary": "Namespace Project.Application.Configuration.Queries Classes UserAwareQuery<TResult> Interfaces IQueryHandler<TQuery, TResult> IQuery<TResult>"
  },
  "api/Project.Application.Configuration.Validation.InvalidCommandException.html": {
    "href": "api/Project.Application.Configuration.Validation.InvalidCommandException.html",
    "title": "Class InvalidCommandException | Project",
    "summary": "Class InvalidCommandException Namespace Project.Application.Configuration.Validation Assembly Project.Application.dll public class InvalidCommandException : Exception, ISerializable Inheritance object Exception InvalidCommandException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidCommandException(string, string) public InvalidCommandException(string message, string details) Parameters message string details string Properties Details public string Details { get; } Property Value string"
  },
  "api/Project.Application.Configuration.Validation.ValidationBehavior-2.html": {
    "href": "api/Project.Application.Configuration.Validation.ValidationBehavior-2.html",
    "title": "Class ValidationBehavior<TRequest, TResponse> | Project",
    "summary": "Class ValidationBehavior<TRequest, TResponse> Namespace Project.Application.Configuration.Validation Assembly Project.Application.dll public class ValidationBehavior<TRequest, TResponse> : IRequestPipelineBehavior<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest TResponse Inheritance object ValidationBehavior<TRequest, TResponse> Implements IRequestPipelineBehavior<TRequest, TResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ValidationBehavior(IEnumerable<IValidator<TRequest>>) public ValidationBehavior(IEnumerable<IValidator<TRequest>> validators) Parameters validators IEnumerable<IValidator<TRequest>> Methods Handle(TRequest, Func<Task<TResponse>>, CancellationToken) public Task<TResponse> Handle(TRequest request, Func<Task<TResponse>> next, CancellationToken cancellationToken) Parameters request TRequest next Func<Task<TResponse>> cancellationToken CancellationToken Returns Task<TResponse>"
  },
  "api/Project.Application.Configuration.Validation.html": {
    "href": "api/Project.Application.Configuration.Validation.html",
    "title": "Namespace Project.Application.Configuration.Validation | Project",
    "summary": "Namespace Project.Application.Configuration.Validation Classes InvalidCommandException ValidationBehavior<TRequest, TResponse>"
  },
  "api/Project.Application.Configuration.html": {
    "href": "api/Project.Application.Configuration.html",
    "title": "Namespace Project.Application.Configuration | Project",
    "summary": "Namespace Project.Application.Configuration Interfaces IExecutionContextAccessor"
  },
  "api/Project.Application.Users.Commands.RegisterUser.RegisterUserCommand.html": {
    "href": "api/Project.Application.Users.Commands.RegisterUser.RegisterUserCommand.html",
    "title": "Class RegisterUserCommand | Project",
    "summary": "Class RegisterUserCommand Namespace Project.Application.Users.Commands.RegisterUser Assembly Project.Application.dll public class RegisterUserCommand : BaseCommand<(string userId, IEnumerable<string> Errors)>, ICommand<(string userId, IEnumerable<string> Errors)>, IRequest<(string userId, IEnumerable<string> Errors)> Inheritance object BaseCommand<(string userId, IEnumerable<string> Errors)> RegisterUserCommand Implements ICommand<(string userId, IEnumerable<string> Errors)> IRequest<(string userId, IEnumerable<string> Errors)> Inherited Members BaseCommand<(string userId, IEnumerable<string> Errors)>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterUserCommand(string, string, string, string) public RegisterUserCommand(string firstName, string lastName, string email, string password) Parameters firstName string lastName string email string password string Properties Email public string Email { get; set; } Property Value string FirstName public string FirstName { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string Password public string Password { get; set; } Property Value string"
  },
  "api/Project.Application.Users.Commands.RegisterUser.RegisterUserCommandHandler.html": {
    "href": "api/Project.Application.Users.Commands.RegisterUser.RegisterUserCommandHandler.html",
    "title": "Class RegisterUserCommandHandler | Project",
    "summary": "Class RegisterUserCommandHandler Namespace Project.Application.Users.Commands.RegisterUser Assembly Project.Application.dll public class RegisterUserCommandHandler : ICommandHandler<RegisterUserCommand, (string userId, IEnumerable<string> Errors)>, IRequestHandler<RegisterUserCommand, (string userId, IEnumerable<string> Errors)> Inheritance object RegisterUserCommandHandler Implements ICommandHandler<RegisterUserCommand, (string userId, IEnumerable<string> Errors)> IRequestHandler<RegisterUserCommand, (string userId, IEnumerable<string> Errors)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterUserCommandHandler(UserManager<User>) public RegisterUserCommandHandler(UserManager<User> userManager) Parameters userManager UserManager<User> Methods Handle(RegisterUserCommand, CancellationToken) public Task<(string userId, IEnumerable<string> Errors)> Handle(RegisterUserCommand request, CancellationToken cancellationToken) Parameters request RegisterUserCommand cancellationToken CancellationToken Returns Task<(string userId, IEnumerable<string> Errors)>"
  },
  "api/Project.Application.Users.Commands.RegisterUser.html": {
    "href": "api/Project.Application.Users.Commands.RegisterUser.html",
    "title": "Namespace Project.Application.Users.Commands.RegisterUser | Project",
    "summary": "Namespace Project.Application.Users.Commands.RegisterUser Classes RegisterUserCommand RegisterUserCommandHandler"
  },
  "api/Project.Application.Users.IUserRepository.html": {
    "href": "api/Project.Application.Users.IUserRepository.html",
    "title": "Interface IUserRepository | Project",
    "summary": "Interface IUserRepository Namespace Project.Application.Users Assembly Project.Application.dll Defines the contract for user-related data operations in the domain layer. public interface IUserRepository Methods CheckPassowrd(User, string) Validates the provided password against the stored credentials for the specified user. Task<bool> CheckPassowrd(User user, string password) Parameters user User The user to validate. password string The plain-text password to check. Returns Task<bool> true if the password is valid; otherwise, false. CreateAsync(User, string) Creates a new user with the specified password. Task<IdentityResult> CreateAsync(User user, string password) Parameters user User The user to create. password string The user's password. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. DeleteAsync(string) Deletes a user by their unique identifier. Task<IdentityResult> DeleteAsync(string userId) Parameters userId string The identifier of the user to delete. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. GetByEmailAsync(string) Retrieves a user by email address. Task<User?> GetByEmailAsync(string email) Parameters email string The email address to search for. Returns Task<User> The user if found; otherwise, null. GetByIdAsync(string) Retrieves a user by their unique identifier. Task<User?> GetByIdAsync(string userId) Parameters userId string The user's unique identifier. Returns Task<User> The user if found; otherwise, null. GetUserByUsernameAsync(string) Retrieves a user by their username. Task<User?> GetUserByUsernameAsync(string username) Parameters username string The username to search for. Returns Task<User> The user if found; otherwise, null. UpdateAsync(User) Updates an existing user. Task<IdentityResult> UpdateAsync(User user) Parameters user User The user with updated data. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation."
  },
  "api/Project.Application.Users.Mappers.UserMapper.html": {
    "href": "api/Project.Application.Users.Mappers.UserMapper.html",
    "title": "Class UserMapper | Project",
    "summary": "Class UserMapper Namespace Project.Application.Users.Mappers Assembly Project.Application.dll public static class UserMapper Inheritance object UserMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToUserDetailsDTO(User) public static UserDetailsDTO ToUserDetailsDTO(this User user) Parameters user User Returns UserDetailsDTO"
  },
  "api/Project.Application.Users.Mappers.html": {
    "href": "api/Project.Application.Users.Mappers.html",
    "title": "Namespace Project.Application.Users.Mappers | Project",
    "summary": "Namespace Project.Application.Users.Mappers Classes UserMapper"
  },
  "api/Project.Application.Users.Queries.GetUserDetails.GetUserDetailsQuery.html": {
    "href": "api/Project.Application.Users.Queries.GetUserDetails.GetUserDetailsQuery.html",
    "title": "Class GetUserDetailsQuery | Project",
    "summary": "Class GetUserDetailsQuery Namespace Project.Application.Users.Queries.GetUserDetails Assembly Project.Application.dll public class GetUserDetailsQuery : IQuery<UserDetailsDTO>, IRequest<UserDetailsDTO> Inheritance object GetUserDetailsQuery Implements IQuery<UserDetailsDTO> IRequest<UserDetailsDTO> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetUserDetailsQuery(ClaimsPrincipal) public GetUserDetailsQuery(ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Properties Principal public ClaimsPrincipal Principal { get; } Property Value ClaimsPrincipal"
  },
  "api/Project.Application.Users.Queries.GetUserDetails.GetUserDetailsQueryHandler.html": {
    "href": "api/Project.Application.Users.Queries.GetUserDetails.GetUserDetailsQueryHandler.html",
    "title": "Class GetUserDetailsQueryHandler | Project",
    "summary": "Class GetUserDetailsQueryHandler Namespace Project.Application.Users.Queries.GetUserDetails Assembly Project.Application.dll public class GetUserDetailsQueryHandler : IQueryHandler<GetUserDetailsQuery, UserDetailsDTO>, IRequestHandler<GetUserDetailsQuery, UserDetailsDTO> Inheritance object GetUserDetailsQueryHandler Implements IQueryHandler<GetUserDetailsQuery, UserDetailsDTO> IRequestHandler<GetUserDetailsQuery, UserDetailsDTO> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetUserDetailsQueryHandler(UserManager<User>) public GetUserDetailsQueryHandler(UserManager<User> userManager) Parameters userManager UserManager<User> Methods Handle(GetUserDetailsQuery, CancellationToken) public Task<UserDetailsDTO> Handle(GetUserDetailsQuery request, CancellationToken cancellationToken) Parameters request GetUserDetailsQuery cancellationToken CancellationToken Returns Task<UserDetailsDTO>"
  },
  "api/Project.Application.Users.Queries.GetUserDetails.UserDetailsDTO.html": {
    "href": "api/Project.Application.Users.Queries.GetUserDetails.UserDetailsDTO.html",
    "title": "Class UserDetailsDTO | Project",
    "summary": "Class UserDetailsDTO Namespace Project.Application.Users.Queries.GetUserDetails Assembly Project.Application.dll public class UserDetailsDTO Inheritance object UserDetailsDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public required string Email { get; set; } Property Value string FirstName public required string FirstName { get; set; } Property Value string LastName public required string LastName { get; set; } Property Value string"
  },
  "api/Project.Application.Users.Queries.GetUserDetails.html": {
    "href": "api/Project.Application.Users.Queries.GetUserDetails.html",
    "title": "Namespace Project.Application.Users.Queries.GetUserDetails | Project",
    "summary": "Namespace Project.Application.Users.Queries.GetUserDetails Classes GetUserDetailsQuery GetUserDetailsQueryHandler UserDetailsDTO"
  },
  "api/Project.Application.Users.html": {
    "href": "api/Project.Application.Users.html",
    "title": "Namespace Project.Application.Users | Project",
    "summary": "Namespace Project.Application.Users Interfaces IUserRepository Defines the contract for user-related data operations in the domain layer."
  },
  "api/Project.Domain.SeedWork.BusinessRuleValidationException.html": {
    "href": "api/Project.Domain.SeedWork.BusinessRuleValidationException.html",
    "title": "Class BusinessRuleValidationException | Project",
    "summary": "Class BusinessRuleValidationException Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Exception thrown when a business rule is violated. Contains the broken rule and a message describing the violation. public class BusinessRuleValidationException : Exception, ISerializable Inheritance object Exception BusinessRuleValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BusinessRuleValidationException(IBusinessRule) Exception thrown when a business rule is violated. Contains the broken rule and a message describing the violation. public BusinessRuleValidationException(IBusinessRule brokenRule) Parameters brokenRule IBusinessRule Properties BrokenRule Gets the broken business rule that caused the exception. public IBusinessRule BrokenRule { get; } Property Value IBusinessRule Details Gets the message describing why the rule was broken. public string Details { get; } Property Value string Methods ToString() Returns a string that represents the current exception. Includes the type and message of the broken rule. public override string ToString() Returns string A string representation of the exception."
  },
  "api/Project.Domain.SeedWork.Entity.html": {
    "href": "api/Project.Domain.SeedWork.Entity.html",
    "title": "Class Entity | Project",
    "summary": "Class Entity Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents the base class for all entities in the domain layer. Provides common behavior such as domain event handling and business rule validation. public abstract class Entity Inheritance object Entity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DomainEvents Gets a read-only collection of domain events that have been raised by this entity. public IReadOnlyCollection<IDomainEvent>? DomainEvents { get; } Property Value IReadOnlyCollection<IDomainEvent> Methods AddDomainEvent(IDomainEvent) Adds a domain event to the entity's list of events. This should be called whenever a significant change occurs in the entity that other parts of the system should react to. protected void AddDomainEvent(IDomainEvent domainEvent) Parameters domainEvent IDomainEvent The domain event to add. CheckRule(IBusinessRule) Checks a business rule and throws a BusinessRuleValidationException if the rule is broken. Use this to enforce domain invariants before performing operations. protected static void CheckRule(IBusinessRule rule) Parameters rule IBusinessRule The business rule to validate. Exceptions BusinessRuleValidationException Thrown when the business rule is broken. ClearDomainEvents() Clears all domain events associated with this entity. This is typically called after the events have been dispatched. public void ClearDomainEvents()"
  },
  "api/Project.Domain.SeedWork.IAggregateRoot.html": {
    "href": "api/Project.Domain.SeedWork.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Project",
    "summary": "Interface IAggregateRoot Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Marker interface used to indicate that an entity is an aggregate root. Aggregate roots are the entry point to a cluster of domain objects and enforce consistency rules. public interface IAggregateRoot"
  },
  "api/Project.Domain.SeedWork.IBusinessRule.html": {
    "href": "api/Project.Domain.SeedWork.IBusinessRule.html",
    "title": "Interface IBusinessRule | Project",
    "summary": "Interface IBusinessRule Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents a business rule that can be validated. Business rules encapsulate domain-specific logic that must be enforced. public interface IBusinessRule Properties Message Gets the validation message describing why the rule is broken. string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken. bool IsBroken() Returns bool true if the rule is broken; otherwise, false."
  },
  "api/Project.Domain.SeedWork.IDomainEvent.html": {
    "href": "api/Project.Domain.SeedWork.IDomainEvent.html",
    "title": "Interface IDomainEvent | Project",
    "summary": "Interface IDomainEvent Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents a domain event that indicates something important has happened within the domain. Domain events are used to notify other parts of the system about changes in state. public interface IDomainEvent : INotification Properties OccurredOn Gets the timestamp indicating when the domain event occurred. DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/Project.Domain.SeedWork.IMediator.html": {
    "href": "api/Project.Domain.SeedWork.IMediator.html",
    "title": "Interface IMediator | Project",
    "summary": "Interface IMediator Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface IMediator Methods Publish<TNotification>(TNotification, CancellationToken) Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification Parameters notification TNotification cancellationToken CancellationToken Returns Task Type Parameters TNotification Send<TResponse>(IRequest<TResponse>, CancellationToken) Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default) Parameters request IRequest<TResponse> cancellationToken CancellationToken Returns Task<TResponse> Type Parameters TResponse"
  },
  "api/Project.Domain.SeedWork.INotification.html": {
    "href": "api/Project.Domain.SeedWork.INotification.html",
    "title": "Interface INotification | Project",
    "summary": "Interface INotification Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Marker interface for domain events and notifications. Used to support the mediator pattern and event dispatching. public interface INotification"
  },
  "api/Project.Domain.SeedWork.INotificationHandler-1.html": {
    "href": "api/Project.Domain.SeedWork.INotificationHandler-1.html",
    "title": "Interface INotificationHandler<TNotification> | Project",
    "summary": "Interface INotificationHandler<TNotification> Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface INotificationHandler<TNotification> where TNotification : INotification Type Parameters TNotification Methods Handle(TNotification, CancellationToken) Task Handle(TNotification notification, CancellationToken cancellationToken) Parameters notification TNotification cancellationToken CancellationToken Returns Task"
  },
  "api/Project.Domain.SeedWork.IRequest-1.html": {
    "href": "api/Project.Domain.SeedWork.IRequest-1.html",
    "title": "Interface IRequest<TResponse> | Project",
    "summary": "Interface IRequest<TResponse> Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface IRequest<TResponse> Type Parameters TResponse"
  },
  "api/Project.Domain.SeedWork.IRequestHandler-2.html": {
    "href": "api/Project.Domain.SeedWork.IRequestHandler-2.html",
    "title": "Interface IRequestHandler<TRequest, TResponse> | Project",
    "summary": "Interface IRequestHandler<TRequest, TResponse> Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface IRequestHandler<in TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest TResponse Methods Handle(TRequest, CancellationToken) Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest cancellationToken CancellationToken Returns Task<TResponse>"
  },
  "api/Project.Domain.SeedWork.IRequestPipelineBehavior-2.html": {
    "href": "api/Project.Domain.SeedWork.IRequestPipelineBehavior-2.html",
    "title": "Interface IRequestPipelineBehavior<TRequest, TResponse> | Project",
    "summary": "Interface IRequestPipelineBehavior<TRequest, TResponse> Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface IRequestPipelineBehavior<TRequest, TResponse> where TRequest : IRequest<TResponse> Type Parameters TRequest TResponse Methods Handle(TRequest, Func<Task<TResponse>>, CancellationToken) Task<TResponse> Handle(TRequest request, Func<Task<TResponse>> next, CancellationToken cancellationToken) Parameters request TRequest next Func<Task<TResponse>> cancellationToken CancellationToken Returns Task<TResponse>"
  },
  "api/Project.Domain.SeedWork.IUnitOfWork.html": {
    "href": "api/Project.Domain.SeedWork.IUnitOfWork.html",
    "title": "Interface IUnitOfWork | Project",
    "summary": "Interface IUnitOfWork Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface IUnitOfWork Methods CommitAsync(CancellationToken) Task<int> CommitAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int> RevertAsync() Task RevertAsync() Returns Task"
  },
  "api/Project.Domain.SeedWork.IUserAware.html": {
    "href": "api/Project.Domain.SeedWork.IUserAware.html",
    "title": "Interface IUserAware | Project",
    "summary": "Interface IUserAware Namespace Project.Domain.SeedWork Assembly Project.Domain.dll public interface IUserAware Methods InjectUser(User) void InjectUser(User user) Parameters user User"
  },
  "api/Project.Domain.SeedWork.IgnoreMemberAttribute.html": {
    "href": "api/Project.Domain.SeedWork.IgnoreMemberAttribute.html",
    "title": "Class IgnoreMemberAttribute | Project",
    "summary": "Class IgnoreMemberAttribute Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Attribute used to exclude a field or property from equality and hash code calculations in value objects. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class IgnoreMemberAttribute : Attribute Inheritance object Attribute IgnoreMemberAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Project.Domain.SeedWork.TypedIdValueBase.html": {
    "href": "api/Project.Domain.SeedWork.TypedIdValueBase.html",
    "title": "Class TypedIdValueBase | Project",
    "summary": "Class TypedIdValueBase Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Base class for strongly-typed identifier value objects. Ensures consistent equality and hash code logic for identifiers. public abstract class TypedIdValueBase : IEquatable<TypedIdValueBase> Inheritance object TypedIdValueBase Implements IEquatable<TypedIdValueBase> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TypedIdValueBase(Guid) Base class for strongly-typed identifier value objects. Ensures consistent equality and hash code logic for identifiers. protected TypedIdValueBase(Guid value) Parameters value Guid Properties Value Gets the underlying GUID value of the identifier. public Guid Value { get; } Property Value Guid Methods Equals(TypedIdValueBase?) Indicates whether the current object is equal to another object of the same type. public bool Equals(TypedIdValueBase? other) Parameters other TypedIdValueBase An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(TypedIdValueBase, TypedIdValueBase) Checks equality between two TypedIdValueBase instances. public static bool operator ==(TypedIdValueBase obj1, TypedIdValueBase obj2) Parameters obj1 TypedIdValueBase obj2 TypedIdValueBase Returns bool operator !=(TypedIdValueBase, TypedIdValueBase) Checks inequality between two TypedIdValueBase instances. public static bool operator !=(TypedIdValueBase x, TypedIdValueBase y) Parameters x TypedIdValueBase y TypedIdValueBase Returns bool"
  },
  "api/Project.Domain.SeedWork.ValueObject.html": {
    "href": "api/Project.Domain.SeedWork.ValueObject.html",
    "title": "Class ValueObject | Project",
    "summary": "Class ValueObject Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents a base class for value objects. Value objects are immutable and compared by the values of their properties and fields. public abstract class ValueObject : IEquatable<ValueObject> Inheritance object ValueObject Implements IEquatable<ValueObject> Derived Email Name UserName Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckRule(IBusinessRule) Validates a business rule and throws a BusinessRuleValidationException if the rule is broken. protected static void CheckRule(IBusinessRule rule) Parameters rule IBusinessRule The business rule to validate. Exceptions BusinessRuleValidationException Thrown if the rule is broken. Equals(ValueObject?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ValueObject? obj) Parameters obj ValueObject Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ValueObject?, ValueObject?) Equality operator for value objects. public static bool operator ==(ValueObject? obj1, ValueObject? obj2) Parameters obj1 ValueObject obj2 ValueObject Returns bool operator !=(ValueObject?, ValueObject?) Inequality operator for value objects. public static bool operator !=(ValueObject? obj1, ValueObject? obj2) Parameters obj1 ValueObject obj2 ValueObject Returns bool"
  },
  "api/Project.Domain.SeedWork.html": {
    "href": "api/Project.Domain.SeedWork.html",
    "title": "Namespace Project.Domain.SeedWork | Project",
    "summary": "Namespace Project.Domain.SeedWork Classes BusinessRuleValidationException Exception thrown when a business rule is violated. Contains the broken rule and a message describing the violation. Entity Represents the base class for all entities in the domain layer. Provides common behavior such as domain event handling and business rule validation. IgnoreMemberAttribute Attribute used to exclude a field or property from equality and hash code calculations in value objects. TypedIdValueBase Base class for strongly-typed identifier value objects. Ensures consistent equality and hash code logic for identifiers. ValueObject Represents a base class for value objects. Value objects are immutable and compared by the values of their properties and fields. Interfaces IAggregateRoot Marker interface used to indicate that an entity is an aggregate root. Aggregate roots are the entry point to a cluster of domain objects and enforce consistency rules. IBusinessRule Represents a business rule that can be validated. Business rules encapsulate domain-specific logic that must be enforced. IDomainEvent Represents a domain event that indicates something important has happened within the domain. Domain events are used to notify other parts of the system about changes in state. IMediator INotification Marker interface for domain events and notifications. Used to support the mediator pattern and event dispatching. INotificationHandler<TNotification> IRequestHandler<TRequest, TResponse> IRequestPipelineBehavior<TRequest, TResponse> IRequest<TResponse> IUnitOfWork IUserAware"
  },
  "api/Project.Domain.SharedKernel.Users.Email.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Email.html",
    "title": "Class Email | Project",
    "summary": "Class Email Namespace Project.Domain.SharedKernel.Users Assembly Project.Domain.dll Represents a domain-specific email address value object. public class Email : ValueObject, IEquatable<ValueObject> Inheritance object ValueObject Email Implements IEquatable<ValueObject> Inherited Members ValueObject.Equals(ValueObject) ValueObject.CheckRule(IBusinessRule) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Email() Required by Entity Framework. Do not use directly. protected Email() Email(string) Initializes a new instance of the Email class. public Email(string value) Parameters value string The email address string. Exceptions BusinessRuleValidationException Thrown when the email does not satisfy the EmailMustBeValidRule. Properties Value Gets the underlying string value of the email address. public string Value { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(Email) Implicit conversion from Email to string. public static implicit operator string(Email email) Parameters email Email The Email instance. Returns string"
  },
  "api/Project.Domain.SharedKernel.Users.Name.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Name.html",
    "title": "Class Name | Project",
    "summary": "Class Name Namespace Project.Domain.SharedKernel.Users Assembly Project.Domain.dll Represents a domain-specific name value object. public class Name : ValueObject, IEquatable<ValueObject> Inheritance object ValueObject Name Implements IEquatable<ValueObject> Inherited Members ValueObject.Equals(ValueObject) ValueObject.CheckRule(IBusinessRule) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Name() Required by Entity Framework. Do not use directly. protected Name() Name(string) Initializes a new instance of the Name class. public Name(string value) Parameters value string The name string. Exceptions BusinessRuleValidationException Thrown when the name does not satisfy the NameMustBeValidRule. Properties Value Gets the underlying string value of the name. public string Value { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. SetValue(string) Updates the name value. public void SetValue(string value) Parameters value string The new name value. Exceptions BusinessRuleValidationException Thrown when the new name does not satisfy the NameMustBeValidRule. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.EmailMustBeValidRule.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.EmailMustBeValidRule.html",
    "title": "Class EmailMustBeValidRule | Project",
    "summary": "Class EmailMustBeValidRule Namespace Project.Domain.SharedKernel.Users.Rules Assembly Project.Domain.dll Business rule to ensure an email address is valid. public class EmailMustBeValidRule : IBusinessRule Inheritance object EmailMustBeValidRule Implements IBusinessRule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmailMustBeValidRule(string) Business rule to ensure an email address is valid. public EmailMustBeValidRule(string email) Parameters email string Properties Message Gets the validation message if the rule is broken. public string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken based on the email format. public bool IsBroken() Returns bool true if the email is invalid; otherwise, false."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.NameMustBeValidRule.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.NameMustBeValidRule.html",
    "title": "Class NameMustBeValidRule | Project",
    "summary": "Class NameMustBeValidRule Namespace Project.Domain.SharedKernel.Users.Rules Assembly Project.Domain.dll Business rule to ensure a name is valid. public class NameMustBeValidRule : IBusinessRule Inheritance object NameMustBeValidRule Implements IBusinessRule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NameMustBeValidRule(string) Business rule to ensure a name is valid. public NameMustBeValidRule(string value) Parameters value string Properties Message Gets the validation message if the rule is broken. public string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken based on length and character constraints. public bool IsBroken() Returns bool true if the name is invalid; otherwise, false."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.UserNameMustBeValidRule.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.UserNameMustBeValidRule.html",
    "title": "Class UserNameMustBeValidRule | Project",
    "summary": "Class UserNameMustBeValidRule Namespace Project.Domain.SharedKernel.Users.Rules Assembly Project.Domain.dll Business rule to ensure a username is valid. public class UserNameMustBeValidRule : IBusinessRule Inheritance object UserNameMustBeValidRule Implements IBusinessRule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserNameMustBeValidRule(string) Business rule to ensure a username is valid. public UserNameMustBeValidRule(string userName) Parameters userName string Properties Message Gets the validation message if the rule is broken. public string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken based on length and allowed characters. public bool IsBroken() Returns bool true if the username is invalid; otherwise, false."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.html",
    "title": "Namespace Project.Domain.SharedKernel.Users.Rules | Project",
    "summary": "Namespace Project.Domain.SharedKernel.Users.Rules Classes EmailMustBeValidRule Business rule to ensure an email address is valid. NameMustBeValidRule Business rule to ensure a name is valid. UserNameMustBeValidRule Business rule to ensure a username is valid."
  },
  "api/Project.Domain.SharedKernel.Users.UserName.html": {
    "href": "api/Project.Domain.SharedKernel.Users.UserName.html",
    "title": "Class UserName | Project",
    "summary": "Class UserName Namespace Project.Domain.SharedKernel.Users Assembly Project.Domain.dll Represents a domain-specific username value object. public class UserName : ValueObject, IEquatable<ValueObject> Inheritance object ValueObject UserName Implements IEquatable<ValueObject> Inherited Members ValueObject.Equals(ValueObject) ValueObject.CheckRule(IBusinessRule) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UserName() Required by Entity Framework. Do not use directly. protected UserName() UserName(string) Initializes a new instance of the UserName class. public UserName(string value) Parameters value string The username string. Exceptions BusinessRuleValidationException Thrown when the username does not satisfy the UserNameMustBeValidRule. Properties Value Gets the underlying string value of the username. public string Value { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(UserName) Implicit conversion from UserName to string. public static implicit operator string(UserName userName) Parameters userName UserName The UserName instance. Returns string"
  },
  "api/Project.Domain.SharedKernel.Users.html": {
    "href": "api/Project.Domain.SharedKernel.Users.html",
    "title": "Namespace Project.Domain.SharedKernel.Users | Project",
    "summary": "Namespace Project.Domain.SharedKernel.Users Classes Email Represents a domain-specific email address value object. Name Represents a domain-specific name value object. UserName Represents a domain-specific username value object."
  },
  "api/Project.Domain.Users.User.html": {
    "href": "api/Project.Domain.Users.User.html",
    "title": "Class User | Project",
    "summary": "Class User Namespace Project.Domain.Users Assembly Project.Domain.dll Represents the application user, inheriting from IdentityUser to use ASP.NET Core Identity features directly. public class User : IdentityUser, IAggregateRoot Inheritance object IdentityUser<string> IdentityUser User Implements IAggregateRoot Inherited Members IdentityUser<string>.ToString() IdentityUser<string>.Id IdentityUser<string>.UserName IdentityUser<string>.NormalizedUserName IdentityUser<string>.Email IdentityUser<string>.NormalizedEmail IdentityUser<string>.EmailConfirmed IdentityUser<string>.PasswordHash IdentityUser<string>.SecurityStamp IdentityUser<string>.ConcurrencyStamp IdentityUser<string>.PhoneNumber IdentityUser<string>.PhoneNumberConfirmed IdentityUser<string>.TwoFactorEnabled IdentityUser<string>.LockoutEnd IdentityUser<string>.LockoutEnabled IdentityUser<string>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors User() [Obsolete(\"Only for EF/Identity serialization\", true)] public User() User(string, string, Name, Name) public User(string userName, string email, Name firstName, Name lastName) Parameters userName string email string firstName Name lastName Name Properties FirstName public Name FirstName { get; } Property Value Name LastName public Name LastName { get; } Property Value Name Methods Create(Name, Name, UserName, Email) Factory method to create a new User instance. public static User Create(Name firstName, Name lastName, UserName userName, Email email) Parameters firstName Name lastName Name userName UserName email Email Returns User"
  },
  "api/Project.Domain.Users.html": {
    "href": "api/Project.Domain.Users.html",
    "title": "Namespace Project.Domain.Users | Project",
    "summary": "Namespace Project.Domain.Users Classes User Represents the application user, inheriting from IdentityUser to use ASP.NET Core Identity features directly."
  },
  "api/Project.Infrastructure.Database.ApplicationDbContext.html": {
    "href": "api/Project.Infrastructure.Database.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | Project",
    "summary": "Class ApplicationDbContext Namespace Project.Infrastructure.Database Assembly Project.Infrastructure.dll Represents the Entity Framework Core database context for the application, integrating with ASP.NET Identity and custom domain configurations. public class ApplicationDbContext : IdentityDbContext<User>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityDbContext<User, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>> IdentityDbContext<User, IdentityRole, string> IdentityDbContext<User> ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<User, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityDbContext<User, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.UserRoles IdentityDbContext<User, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.Roles IdentityDbContext<User, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.RoleClaims IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.Users IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserClaims IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserLogins IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserTokens IdentityUserContext<User, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.SchemaVersion DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) Represents the Entity Framework Core database context for the application, integrating with ASP.NET Identity and custom domain configurations. public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Methods OnModelCreating(ModelBuilder) Configures the entity models and applies all configurations found in the assembly. protected override void OnModelCreating(ModelBuilder builder) Parameters builder ModelBuilder The model builder used to configure entity mappings."
  },
  "api/Project.Infrastructure.Database.DataAccessModule.html": {
    "href": "api/Project.Infrastructure.Database.DataAccessModule.html",
    "title": "Class DataAccessModule | Project",
    "summary": "Class DataAccessModule Namespace Project.Infrastructure.Database Assembly Project.Infrastructure.dll public static class DataAccessModule Inheritance object DataAccessModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDataAccessModule(IServiceCollection) public static IServiceCollection AddDataAccessModule(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Project.Infrastructure.Database.html": {
    "href": "api/Project.Infrastructure.Database.html",
    "title": "Namespace Project.Infrastructure.Database | Project",
    "summary": "Namespace Project.Infrastructure.Database Classes ApplicationDbContext Represents the Entity Framework Core database context for the application, integrating with ASP.NET Identity and custom domain configurations. DataAccessModule"
  },
  "api/Project.Infrastructure.Domain.UnitOfWork.html": {
    "href": "api/Project.Infrastructure.Domain.UnitOfWork.html",
    "title": "Class UnitOfWork | Project",
    "summary": "Class UnitOfWork Namespace Project.Infrastructure.Domain Assembly Project.Infrastructure.dll public class UnitOfWork : IUnitOfWork Inheritance object UnitOfWork Implements IUnitOfWork Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnitOfWork(ApplicationDbContext, IDomainEventsDispatcher) public UnitOfWork(ApplicationDbContext ordersContext, IDomainEventsDispatcher domainEventsDispatcher) Parameters ordersContext ApplicationDbContext domainEventsDispatcher IDomainEventsDispatcher Methods CommitAsync(CancellationToken) public Task<int> CommitAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int> RevertAsync() public Task RevertAsync() Returns Task"
  },
  "api/Project.Infrastructure.Domain.Users.UserRepository.html": {
    "href": "api/Project.Infrastructure.Domain.Users.UserRepository.html",
    "title": "Class UserRepository | Project",
    "summary": "Class UserRepository Namespace Project.Infrastructure.Domain.Users Assembly Project.Infrastructure.dll Provides an implementation of IUserRepository using Entity Framework Core and ASP.NET Identity. public class UserRepository : IUserRepository Inheritance object UserRepository Implements IUserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserRepository(UserManager<User>, ApplicationDbContext) Provides an implementation of IUserRepository using Entity Framework Core and ASP.NET Identity. public UserRepository(UserManager<User> userManager, ApplicationDbContext applicationDbContext) Parameters userManager UserManager<User> applicationDbContext ApplicationDbContext Methods CheckPassowrd(User, string) Validates the provided password against the stored credentials for the specified user. public Task<bool> CheckPassowrd(User user, string password) Parameters user User The user to validate. password string The plain-text password to check. Returns Task<bool> true if the password is valid; otherwise, false. CreateAsync(User, string) Creates a new user with the specified password. public Task<IdentityResult> CreateAsync(User user, string password) Parameters user User The user to create. password string The user's password. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. DeleteAsync(string) Deletes a user by their unique identifier. public Task<IdentityResult> DeleteAsync(string userId) Parameters userId string The identifier of the user to delete. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. GetByEmailAsync(string) Retrieves a user by email address. public Task<User?> GetByEmailAsync(string email) Parameters email string The email address to search for. Returns Task<User> The user if found; otherwise, null. GetByIdAsync(string) Retrieves a user by their unique identifier. public Task<User?> GetByIdAsync(string userId) Parameters userId string The user's unique identifier. Returns Task<User> The user if found; otherwise, null. GetUserByUsernameAsync(string) Retrieves a user by their username. public Task<User?> GetUserByUsernameAsync(string username) Parameters username string The username to search for. Returns Task<User> The user if found; otherwise, null. UpdateAsync(User) Updates an existing user. public Task<IdentityResult> UpdateAsync(User user) Parameters user User The user with updated data. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation."
  },
  "api/Project.Infrastructure.Domain.Users.html": {
    "href": "api/Project.Infrastructure.Domain.Users.html",
    "title": "Namespace Project.Infrastructure.Domain.Users | Project",
    "summary": "Namespace Project.Infrastructure.Domain.Users Classes UserRepository Provides an implementation of IUserRepository using Entity Framework Core and ASP.NET Identity."
  },
  "api/Project.Infrastructure.Domain.html": {
    "href": "api/Project.Infrastructure.Domain.html",
    "title": "Namespace Project.Infrastructure.Domain | Project",
    "summary": "Namespace Project.Infrastructure.Domain Classes UnitOfWork"
  },
  "api/Project.Infrastructure.Migrations.Init.html": {
    "href": "api/Project.Infrastructure.Migrations.Init.html",
    "title": "Class Init | Project",
    "summary": "Class Init Namespace Project.Infrastructure.Migrations Assembly Project.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationDbContext))] [Migration(\"20250812211505_Init\")] public class Init : Migration Inheritance object Migration Init Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Project.Infrastructure.Migrations.html": {
    "href": "api/Project.Infrastructure.Migrations.html",
    "title": "Namespace Project.Infrastructure.Migrations | Project",
    "summary": "Namespace Project.Infrastructure.Migrations Classes Init A base class inherited by each EF Core migration."
  },
  "api/Project.Infrastructure.Observability.ObservabilityModule.html": {
    "href": "api/Project.Infrastructure.Observability.ObservabilityModule.html",
    "title": "Class ObservabilityModule | Project",
    "summary": "Class ObservabilityModule Namespace Project.Infrastructure.Observability Assembly Project.Infrastructure.dll public static class ObservabilityModule Inheritance object ObservabilityModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddObservabilityModule(IServiceCollection) public static IServiceCollection AddObservabilityModule(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Project.Infrastructure.Observability.html": {
    "href": "api/Project.Infrastructure.Observability.html",
    "title": "Namespace Project.Infrastructure.Observability | Project",
    "summary": "Namespace Project.Infrastructure.Observability Classes ObservabilityModule"
  },
  "api/Project.Infrastructure.Processing.CommandsExecutor.html": {
    "href": "api/Project.Infrastructure.Processing.CommandsExecutor.html",
    "title": "Class CommandsExecutor | Project",
    "summary": "Class CommandsExecutor Namespace Project.Infrastructure.Processing Assembly Project.Infrastructure.dll public class CommandsExecutor Inheritance object CommandsExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandsExecutor(IServiceProvider) public CommandsExecutor(IServiceProvider provider) Parameters provider IServiceProvider Methods Execute(ICommand) public Task Execute(ICommand command) Parameters command ICommand Returns Task Execute<TResult>(ICommand<TResult>) public Task<TResult> Execute<TResult>(ICommand<TResult> command) Parameters command ICommand<TResult> Returns Task<TResult> Type Parameters TResult"
  },
  "api/Project.Infrastructure.Processing.DomainEventsDispatcher.html": {
    "href": "api/Project.Infrastructure.Processing.DomainEventsDispatcher.html",
    "title": "Class DomainEventsDispatcher | Project",
    "summary": "Class DomainEventsDispatcher Namespace Project.Infrastructure.Processing Assembly Project.Infrastructure.dll public class DomainEventsDispatcher : IDomainEventsDispatcher Inheritance object DomainEventsDispatcher Implements IDomainEventsDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DomainEventsDispatcher(IMediator, ApplicationDbContext) public DomainEventsDispatcher(IMediator mediator, ApplicationDbContext context) Parameters mediator IMediator context ApplicationDbContext Methods DispatchEventsAsync() public Task DispatchEventsAsync() Returns Task"
  },
  "api/Project.Infrastructure.Processing.IDomainEventsDispatcher.html": {
    "href": "api/Project.Infrastructure.Processing.IDomainEventsDispatcher.html",
    "title": "Interface IDomainEventsDispatcher | Project",
    "summary": "Interface IDomainEventsDispatcher Namespace Project.Infrastructure.Processing Assembly Project.Infrastructure.dll public interface IDomainEventsDispatcher Methods DispatchEventsAsync() Task DispatchEventsAsync() Returns Task"
  },
  "api/Project.Infrastructure.Processing.Mediator.html": {
    "href": "api/Project.Infrastructure.Processing.Mediator.html",
    "title": "Class Mediator | Project",
    "summary": "Class Mediator Namespace Project.Infrastructure.Processing Assembly Project.Infrastructure.dll public class Mediator : IMediator Inheritance object Mediator Implements IMediator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Mediator(IServiceProvider) public Mediator(IServiceProvider provider) Parameters provider IServiceProvider Methods Publish<TNotification>(TNotification, CancellationToken) public Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification Parameters notification TNotification cancellationToken CancellationToken Returns Task Type Parameters TNotification Send<TResponse>(IRequest<TResponse>, CancellationToken) public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default) Parameters request IRequest<TResponse> cancellationToken CancellationToken Returns Task<TResponse> Type Parameters TResponse"
  },
  "api/Project.Infrastructure.Processing.MediatorModule.html": {
    "href": "api/Project.Infrastructure.Processing.MediatorModule.html",
    "title": "Class MediatorModule | Project",
    "summary": "Class MediatorModule Namespace Project.Infrastructure.Processing Assembly Project.Infrastructure.dll public static class MediatorModule Inheritance object MediatorModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMediatorModule(IServiceCollection, params object[]) public static IServiceCollection AddMediatorModule(this IServiceCollection services, params object[] args) Parameters services IServiceCollection args object[] Returns IServiceCollection RegisterHandlers(IServiceCollection, Assembly[], Type) public static void RegisterHandlers(IServiceCollection services, Assembly[] assemblies, Type handlerInterface) Parameters services IServiceCollection assemblies Assembly[] handlerInterface Type ResolveAssemblies(object[]) public static Assembly[] ResolveAssemblies(object[] args) Parameters args object[] Returns Assembly[]"
  },
  "api/Project.Infrastructure.Processing.QueriesExecutor.html": {
    "href": "api/Project.Infrastructure.Processing.QueriesExecutor.html",
    "title": "Class QueriesExecutor | Project",
    "summary": "Class QueriesExecutor Namespace Project.Infrastructure.Processing Assembly Project.Infrastructure.dll public class QueriesExecutor Inheritance object QueriesExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueriesExecutor(IServiceProvider) public QueriesExecutor(IServiceProvider provider) Parameters provider IServiceProvider Methods Execute<TResult>(IQuery<TResult>) public Task<TResult> Execute<TResult>(IQuery<TResult> query) Parameters query IQuery<TResult> Returns Task<TResult> Type Parameters TResult"
  },
  "api/Project.Infrastructure.Processing.html": {
    "href": "api/Project.Infrastructure.Processing.html",
    "title": "Namespace Project.Infrastructure.Processing | Project",
    "summary": "Namespace Project.Infrastructure.Processing Classes CommandsExecutor DomainEventsDispatcher Mediator MediatorModule QueriesExecutor Interfaces IDomainEventsDispatcher"
  },
  "api/Project.Infrastructure.SeedWork.Resilience.NameConverter.html": {
    "href": "api/Project.Infrastructure.SeedWork.Resilience.NameConverter.html",
    "title": "Class NameConverter | Project",
    "summary": "Class NameConverter Namespace Project.Infrastructure.SeedWork.Resilience Assembly Project.Infrastructure.dll public sealed class NameConverter : ValueConverter<Name, string> Inheritance object ValueConverter ValueConverter<Name, string> NameConverter Inherited Members ValueConverter<Name, string>.ConvertToProvider ValueConverter<Name, string>.ConvertFromProvider ValueConverter<Name, string>.ConvertToProviderTyped ValueConverter<Name, string>.ConvertFromProviderTyped ValueConverter<Name, string>.ConvertToProviderExpression ValueConverter<Name, string>.ConvertFromProviderExpression ValueConverter<Name, string>.ModelClrType ValueConverter<Name, string>.ProviderClrType ValueConverter<Name, string>.ConstructorExpression ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls ValueConverter.ConstructorExpression object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NameConverter(ConverterMappingHints?) public NameConverter(ConverterMappingHints? mappingHints = null) Parameters mappingHints ConverterMappingHints"
  },
  "api/Project.Infrastructure.SeedWork.Resilience.html": {
    "href": "api/Project.Infrastructure.SeedWork.Resilience.html",
    "title": "Namespace Project.Infrastructure.SeedWork.Resilience | Project",
    "summary": "Namespace Project.Infrastructure.SeedWork.Resilience Classes NameConverter"
  },
  "api/Project.Infrastructure.SeedWork.StronglyTypedIdValueConverterSelector.html": {
    "href": "api/Project.Infrastructure.SeedWork.StronglyTypedIdValueConverterSelector.html",
    "title": "Class StronglyTypedIdValueConverterSelector | Project",
    "summary": "Class StronglyTypedIdValueConverterSelector Namespace Project.Infrastructure.SeedWork Assembly Project.Infrastructure.dll public class StronglyTypedIdValueConverterSelector : ValueConverterSelector, IValueConverterSelector Inheritance object ValueConverterSelector StronglyTypedIdValueConverterSelector Implements IValueConverterSelector Inherited Members ValueConverterSelector.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StronglyTypedIdValueConverterSelector(ValueConverterSelectorDependencies) public StronglyTypedIdValueConverterSelector(ValueConverterSelectorDependencies dependencies) Parameters dependencies ValueConverterSelectorDependencies Methods Select(Type, Type?) Returns the list of ValueConverter instances that can be used to convert the given model type. Converters nearer the front of the list should be used in preference to converters nearer the end. public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type? providerClrType = null) Parameters modelClrType Type The type for which a converter is needed. providerClrType Type The database provider type to target, or null for any. Returns IEnumerable<ValueConverterInfo> The converters available."
  },
  "api/Project.Infrastructure.SeedWork.TypedIdValueConverter-1.html": {
    "href": "api/Project.Infrastructure.SeedWork.TypedIdValueConverter-1.html",
    "title": "Class TypedIdValueConverter<TTypedIdValue> | Project",
    "summary": "Class TypedIdValueConverter<TTypedIdValue> Namespace Project.Infrastructure.SeedWork Assembly Project.Infrastructure.dll public class TypedIdValueConverter<TTypedIdValue> : ValueConverter<TTypedIdValue, Guid> where TTypedIdValue : TypedIdValueBase Type Parameters TTypedIdValue Inheritance object ValueConverter ValueConverter<TTypedIdValue, Guid> TypedIdValueConverter<TTypedIdValue> Inherited Members ValueConverter<TTypedIdValue, Guid>.ConvertToProvider ValueConverter<TTypedIdValue, Guid>.ConvertFromProvider ValueConverter<TTypedIdValue, Guid>.ConvertToProviderTyped ValueConverter<TTypedIdValue, Guid>.ConvertFromProviderTyped ValueConverter<TTypedIdValue, Guid>.ConvertToProviderExpression ValueConverter<TTypedIdValue, Guid>.ConvertFromProviderExpression ValueConverter<TTypedIdValue, Guid>.ModelClrType ValueConverter<TTypedIdValue, Guid>.ProviderClrType ValueConverter<TTypedIdValue, Guid>.ConstructorExpression ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls ValueConverter.ConstructorExpression object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TypedIdValueConverter(ConverterMappingHints?) public TypedIdValueConverter(ConverterMappingHints? mappingHints = null) Parameters mappingHints ConverterMappingHints"
  },
  "api/Project.Infrastructure.SeedWork.html": {
    "href": "api/Project.Infrastructure.SeedWork.html",
    "title": "Namespace Project.Infrastructure.SeedWork | Project",
    "summary": "Namespace Project.Infrastructure.SeedWork Classes StronglyTypedIdValueConverterSelector TypedIdValueConverter<TTypedIdValue>"
  },
  "api/Project.Tests.UnitTest1.html": {
    "href": "api/Project.Tests.UnitTest1.html",
    "title": "Class UnitTest1 | Project",
    "summary": "Class UnitTest1 Namespace Project.Tests Assembly Project.Tests.dll public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Test1() [Fact] public void Test1()"
  },
  "api/Project.Tests.html": {
    "href": "api/Project.Tests.html",
    "title": "Namespace Project.Tests | Project",
    "summary": "Namespace Project.Tests Classes UnitTest1"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Project",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Project",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Project",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}