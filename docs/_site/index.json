{
  "api/Project.Application.Users.IUserRepository.html": {
    "href": "api/Project.Application.Users.IUserRepository.html",
    "title": "Interface IUserRepository | Project",
    "summary": "Interface IUserRepository Namespace Project.Application.Users Assembly Project.Application.dll Defines the contract for user-related data operations in the domain layer. public interface IUserRepository Methods CheckPassowrd(User, string) Validates the provided password against the stored credentials for the specified user. Task<bool> CheckPassowrd(User user, string password) Parameters user User The user to validate. password string The plain-text password to check. Returns Task<bool> true if the password is valid; otherwise, false. CreateAsync(User, string) Creates a new user with the specified password. Task<IdentityResult> CreateAsync(User user, string password) Parameters user User The user to create. password string The user's password. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. DeleteAsync(UserId) Deletes a user by their unique identifier. Task<IdentityResult> DeleteAsync(UserId userId) Parameters userId UserId The identifier of the user to delete. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. GetByEmailAsync(string) Retrieves a user by email address. Task<User?> GetByEmailAsync(string email) Parameters email string The email address to search for. Returns Task<User> The user if found; otherwise, null. GetByIdAsync(UserId) Retrieves a user by their unique identifier. Task<User?> GetByIdAsync(UserId userId) Parameters userId UserId The user's unique identifier. Returns Task<User> The user if found; otherwise, null. GetUserByUsernameAsync(string) Retrieves a user by their username. Task<User?> GetUserByUsernameAsync(string username) Parameters username string The username to search for. Returns Task<User> The user if found; otherwise, null. UpdateAsync(User) Updates an existing user. Task<IdentityResult> UpdateAsync(User user) Parameters user User The user with updated data. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation."
  },
  "api/Project.Application.Users.html": {
    "href": "api/Project.Application.Users.html",
    "title": "Namespace Project.Application.Users | Project",
    "summary": "Namespace Project.Application.Users Interfaces IUserRepository Defines the contract for user-related data operations in the domain layer."
  },
  "api/Project.Domain.SeedWork.BusinessRuleValidationException.html": {
    "href": "api/Project.Domain.SeedWork.BusinessRuleValidationException.html",
    "title": "Class BusinessRuleValidationException | Project",
    "summary": "Class BusinessRuleValidationException Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Exception thrown when a business rule is violated. Contains the broken rule and a message describing the violation. public class BusinessRuleValidationException : Exception, ISerializable Inheritance object Exception BusinessRuleValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BusinessRuleValidationException(IBusinessRule) Exception thrown when a business rule is violated. Contains the broken rule and a message describing the violation. public BusinessRuleValidationException(IBusinessRule brokenRule) Parameters brokenRule IBusinessRule Properties BrokenRule Gets the broken business rule that caused the exception. public IBusinessRule BrokenRule { get; } Property Value IBusinessRule Details Gets the message describing why the rule was broken. public string Details { get; } Property Value string Methods ToString() Returns a string that represents the current exception. Includes the type and message of the broken rule. public override string ToString() Returns string A string representation of the exception."
  },
  "api/Project.Domain.SeedWork.Entity.html": {
    "href": "api/Project.Domain.SeedWork.Entity.html",
    "title": "Class Entity | Project",
    "summary": "Class Entity Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents the base class for all entities in the domain layer. Provides common behavior such as domain event handling and business rule validation. public abstract class Entity Inheritance object Entity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DomainEvents Gets a read-only collection of domain events that have been raised by this entity. public IReadOnlyCollection<IDomainEvent>? DomainEvents { get; } Property Value IReadOnlyCollection<IDomainEvent> Methods AddDomainEvent(IDomainEvent) Adds a domain event to the entity's list of events. This should be called whenever a significant change occurs in the entity that other parts of the system should react to. protected void AddDomainEvent(IDomainEvent domainEvent) Parameters domainEvent IDomainEvent The domain event to add. CheckRule(IBusinessRule) Checks a business rule and throws a BusinessRuleValidationException if the rule is broken. Use this to enforce domain invariants before performing operations. protected static void CheckRule(IBusinessRule rule) Parameters rule IBusinessRule The business rule to validate. Exceptions BusinessRuleValidationException Thrown when the business rule is broken. ClearDomainEvents() Clears all domain events associated with this entity. This is typically called after the events have been dispatched. public void ClearDomainEvents()"
  },
  "api/Project.Domain.SeedWork.IAggregateRoot.html": {
    "href": "api/Project.Domain.SeedWork.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Project",
    "summary": "Interface IAggregateRoot Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Marker interface used to indicate that an entity is an aggregate root. Aggregate roots are the entry point to a cluster of domain objects and enforce consistency rules. public interface IAggregateRoot"
  },
  "api/Project.Domain.SeedWork.IBusinessRule.html": {
    "href": "api/Project.Domain.SeedWork.IBusinessRule.html",
    "title": "Interface IBusinessRule | Project",
    "summary": "Interface IBusinessRule Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents a business rule that can be validated. Business rules encapsulate domain-specific logic that must be enforced. public interface IBusinessRule Properties Message Gets the validation message describing why the rule is broken. string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken. bool IsBroken() Returns bool true if the rule is broken; otherwise, false."
  },
  "api/Project.Domain.SeedWork.IDomainEvent.html": {
    "href": "api/Project.Domain.SeedWork.IDomainEvent.html",
    "title": "Interface IDomainEvent | Project",
    "summary": "Interface IDomainEvent Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents a domain event that indicates something important has happened within the domain. Domain events are used to notify other parts of the system about changes in state. public interface IDomainEvent : INotification Properties OccurredOn Gets the timestamp indicating when the domain event occurred. DateTime OccurredOn { get; } Property Value DateTime"
  },
  "api/Project.Domain.SeedWork.INotification.html": {
    "href": "api/Project.Domain.SeedWork.INotification.html",
    "title": "Interface INotification | Project",
    "summary": "Interface INotification Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Marker interface for domain events and notifications. Used to support the mediator pattern and event dispatching. public interface INotification"
  },
  "api/Project.Domain.SeedWork.IgnoreMemberAttribute.html": {
    "href": "api/Project.Domain.SeedWork.IgnoreMemberAttribute.html",
    "title": "Class IgnoreMemberAttribute | Project",
    "summary": "Class IgnoreMemberAttribute Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Attribute used to exclude a field or property from equality and hash code calculations in value objects. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class IgnoreMemberAttribute : Attribute Inheritance object Attribute IgnoreMemberAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Project.Domain.SeedWork.TypedIdValueBase.html": {
    "href": "api/Project.Domain.SeedWork.TypedIdValueBase.html",
    "title": "Class TypedIdValueBase | Project",
    "summary": "Class TypedIdValueBase Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Base class for strongly-typed identifier value objects. Ensures consistent equality and hash code logic for identifiers. public abstract class TypedIdValueBase : IEquatable<TypedIdValueBase> Inheritance object TypedIdValueBase Implements IEquatable<TypedIdValueBase> Derived UserId Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TypedIdValueBase(Guid) Base class for strongly-typed identifier value objects. Ensures consistent equality and hash code logic for identifiers. protected TypedIdValueBase(Guid value) Parameters value Guid Properties Value Gets the underlying GUID value of the identifier. public Guid Value { get; } Property Value Guid Methods Equals(TypedIdValueBase?) Indicates whether the current object is equal to another object of the same type. public bool Equals(TypedIdValueBase? other) Parameters other TypedIdValueBase An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(TypedIdValueBase, TypedIdValueBase) Checks equality between two TypedIdValueBase instances. public static bool operator ==(TypedIdValueBase obj1, TypedIdValueBase obj2) Parameters obj1 TypedIdValueBase obj2 TypedIdValueBase Returns bool operator !=(TypedIdValueBase, TypedIdValueBase) Checks inequality between two TypedIdValueBase instances. public static bool operator !=(TypedIdValueBase x, TypedIdValueBase y) Parameters x TypedIdValueBase y TypedIdValueBase Returns bool"
  },
  "api/Project.Domain.SeedWork.ValueObject.html": {
    "href": "api/Project.Domain.SeedWork.ValueObject.html",
    "title": "Class ValueObject | Project",
    "summary": "Class ValueObject Namespace Project.Domain.SeedWork Assembly Project.Domain.dll Represents a base class for value objects. Value objects are immutable and compared by the values of their properties and fields. public abstract class ValueObject : IEquatable<ValueObject> Inheritance object ValueObject Implements IEquatable<ValueObject> Derived Email Name UserName Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckRule(IBusinessRule) Validates a business rule and throws a BusinessRuleValidationException if the rule is broken. protected static void CheckRule(IBusinessRule rule) Parameters rule IBusinessRule The business rule to validate. Exceptions BusinessRuleValidationException Thrown if the rule is broken. Equals(ValueObject?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ValueObject? obj) Parameters obj ValueObject Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ValueObject?, ValueObject?) Equality operator for value objects. public static bool operator ==(ValueObject? obj1, ValueObject? obj2) Parameters obj1 ValueObject obj2 ValueObject Returns bool operator !=(ValueObject?, ValueObject?) Inequality operator for value objects. public static bool operator !=(ValueObject? obj1, ValueObject? obj2) Parameters obj1 ValueObject obj2 ValueObject Returns bool"
  },
  "api/Project.Domain.SeedWork.html": {
    "href": "api/Project.Domain.SeedWork.html",
    "title": "Namespace Project.Domain.SeedWork | Project",
    "summary": "Namespace Project.Domain.SeedWork Classes BusinessRuleValidationException Exception thrown when a business rule is violated. Contains the broken rule and a message describing the violation. Entity Represents the base class for all entities in the domain layer. Provides common behavior such as domain event handling and business rule validation. IgnoreMemberAttribute Attribute used to exclude a field or property from equality and hash code calculations in value objects. TypedIdValueBase Base class for strongly-typed identifier value objects. Ensures consistent equality and hash code logic for identifiers. ValueObject Represents a base class for value objects. Value objects are immutable and compared by the values of their properties and fields. Interfaces IAggregateRoot Marker interface used to indicate that an entity is an aggregate root. Aggregate roots are the entry point to a cluster of domain objects and enforce consistency rules. IBusinessRule Represents a business rule that can be validated. Business rules encapsulate domain-specific logic that must be enforced. IDomainEvent Represents a domain event that indicates something important has happened within the domain. Domain events are used to notify other parts of the system about changes in state. INotification Marker interface for domain events and notifications. Used to support the mediator pattern and event dispatching."
  },
  "api/Project.Domain.SharedKernel.Users.Email.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Email.html",
    "title": "Class Email | Project",
    "summary": "Class Email Namespace Project.Domain.SharedKernel.Users Assembly Project.Domain.dll Represents a domain-specific email address value object. public class Email : ValueObject, IEquatable<ValueObject> Inheritance object ValueObject Email Implements IEquatable<ValueObject> Inherited Members ValueObject.Equals(ValueObject) ValueObject.CheckRule(IBusinessRule) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Email() Required by Entity Framework. Do not use directly. protected Email() Email(string) Initializes a new instance of the Email class. public Email(string value) Parameters value string The email address string. Exceptions BusinessRuleValidationException Thrown when the email does not satisfy the EmailMustBeValidRule. Properties Value Gets the underlying string value of the email address. public string Value { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(Email) Implicit conversion from Email to string. public static implicit operator string(Email email) Parameters email Email The Email instance. Returns string"
  },
  "api/Project.Domain.SharedKernel.Users.Name.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Name.html",
    "title": "Class Name | Project",
    "summary": "Class Name Namespace Project.Domain.SharedKernel.Users Assembly Project.Domain.dll Represents a domain-specific name value object. public class Name : ValueObject, IEquatable<ValueObject> Inheritance object ValueObject Name Implements IEquatable<ValueObject> Inherited Members ValueObject.Equals(ValueObject) ValueObject.CheckRule(IBusinessRule) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Name() Required by Entity Framework. Do not use directly. protected Name() Name(string) Initializes a new instance of the Name class. public Name(string value) Parameters value string The name string. Exceptions BusinessRuleValidationException Thrown when the name does not satisfy the NameMustBeValidRule. Properties Value Gets the underlying string value of the name. public string Value { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. SetValue(string) Updates the name value. public void SetValue(string value) Parameters value string The new name value. Exceptions BusinessRuleValidationException Thrown when the new name does not satisfy the NameMustBeValidRule. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.EmailMustBeValidRule.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.EmailMustBeValidRule.html",
    "title": "Class EmailMustBeValidRule | Project",
    "summary": "Class EmailMustBeValidRule Namespace Project.Domain.SharedKernel.Users.Rules Assembly Project.Domain.dll Business rule to ensure an email address is valid. public class EmailMustBeValidRule : IBusinessRule Inheritance object EmailMustBeValidRule Implements IBusinessRule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmailMustBeValidRule(string) Business rule to ensure an email address is valid. public EmailMustBeValidRule(string email) Parameters email string Properties Message Gets the validation message if the rule is broken. public string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken based on the email format. public bool IsBroken() Returns bool true if the email is invalid; otherwise, false."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.NameMustBeValidRule.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.NameMustBeValidRule.html",
    "title": "Class NameMustBeValidRule | Project",
    "summary": "Class NameMustBeValidRule Namespace Project.Domain.SharedKernel.Users.Rules Assembly Project.Domain.dll Business rule to ensure a name is valid. public class NameMustBeValidRule : IBusinessRule Inheritance object NameMustBeValidRule Implements IBusinessRule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NameMustBeValidRule(string) Business rule to ensure a name is valid. public NameMustBeValidRule(string value) Parameters value string Properties Message Gets the validation message if the rule is broken. public string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken based on length and character constraints. public bool IsBroken() Returns bool true if the name is invalid; otherwise, false."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.UserNameMustBeValidRule.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.UserNameMustBeValidRule.html",
    "title": "Class UserNameMustBeValidRule | Project",
    "summary": "Class UserNameMustBeValidRule Namespace Project.Domain.SharedKernel.Users.Rules Assembly Project.Domain.dll Business rule to ensure a username is valid. public class UserNameMustBeValidRule : IBusinessRule Inheritance object UserNameMustBeValidRule Implements IBusinessRule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserNameMustBeValidRule(string) Business rule to ensure a username is valid. public UserNameMustBeValidRule(string userName) Parameters userName string Properties Message Gets the validation message if the rule is broken. public string Message { get; } Property Value string Methods IsBroken() Determines whether the rule is broken based on length and allowed characters. public bool IsBroken() Returns bool true if the username is invalid; otherwise, false."
  },
  "api/Project.Domain.SharedKernel.Users.Rules.html": {
    "href": "api/Project.Domain.SharedKernel.Users.Rules.html",
    "title": "Namespace Project.Domain.SharedKernel.Users.Rules | Project",
    "summary": "Namespace Project.Domain.SharedKernel.Users.Rules Classes EmailMustBeValidRule Business rule to ensure an email address is valid. NameMustBeValidRule Business rule to ensure a name is valid. UserNameMustBeValidRule Business rule to ensure a username is valid."
  },
  "api/Project.Domain.SharedKernel.Users.UserName.html": {
    "href": "api/Project.Domain.SharedKernel.Users.UserName.html",
    "title": "Class UserName | Project",
    "summary": "Class UserName Namespace Project.Domain.SharedKernel.Users Assembly Project.Domain.dll Represents a domain-specific username value object. public class UserName : ValueObject, IEquatable<ValueObject> Inheritance object ValueObject UserName Implements IEquatable<ValueObject> Inherited Members ValueObject.Equals(ValueObject) ValueObject.CheckRule(IBusinessRule) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UserName() Required by Entity Framework. Do not use directly. protected UserName() UserName(string) Initializes a new instance of the UserName class. public UserName(string value) Parameters value string The username string. Exceptions BusinessRuleValidationException Thrown when the username does not satisfy the UserNameMustBeValidRule. Properties Value Gets the underlying string value of the username. public string Value { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator string(UserName) Implicit conversion from UserName to string. public static implicit operator string(UserName userName) Parameters userName UserName The UserName instance. Returns string"
  },
  "api/Project.Domain.SharedKernel.Users.html": {
    "href": "api/Project.Domain.SharedKernel.Users.html",
    "title": "Namespace Project.Domain.SharedKernel.Users | Project",
    "summary": "Namespace Project.Domain.SharedKernel.Users Classes Email Represents a domain-specific email address value object. Name Represents a domain-specific name value object. UserName Represents a domain-specific username value object."
  },
  "api/Project.Domain.Users.User.html": {
    "href": "api/Project.Domain.Users.User.html",
    "title": "Class User | Project",
    "summary": "Class User Namespace Project.Domain.Users Assembly Project.Domain.dll Represents a domain user. public class User : IAggregateRoot Inheritance object User Implements IAggregateRoot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets the user's email address. public Email Email { get; } Property Value Email FirstName Gets the user's first name. public Name FirstName { get; } Property Value Name Id Gets the unique identifier for the user. public UserId Id { get; } Property Value UserId LastName Gets the user's last name. public Name LastName { get; } Property Value Name UserName Gets the user's username. public UserName UserName { get; } Property Value UserName Methods Create(Name, Name, UserName, Email) Creates a new User instance. public static User Create(Name firstName, Name lastName, UserName userName, Email email) Parameters firstName Name lastName Name userName UserName email Email Returns User"
  },
  "api/Project.Domain.Users.UserId.html": {
    "href": "api/Project.Domain.Users.UserId.html",
    "title": "Class UserId | Project",
    "summary": "Class UserId Namespace Project.Domain.Users Assembly Project.Domain.dll Represents a strongly-typed identifier for the User aggregate. public sealed class UserId : TypedIdValueBase, IEquatable<TypedIdValueBase> Inheritance object TypedIdValueBase UserId Implements IEquatable<TypedIdValueBase> Inherited Members TypedIdValueBase.Value TypedIdValueBase.Equals(object) TypedIdValueBase.GetHashCode() TypedIdValueBase.Equals(TypedIdValueBase) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UserId(Guid) public UserId(Guid id) Parameters id Guid UserId(string) public UserId(string id) Parameters id string Methods NewId() Creates a new unique UserId. public static UserId NewId() Returns UserId"
  },
  "api/Project.Domain.Users.html": {
    "href": "api/Project.Domain.Users.html",
    "title": "Namespace Project.Domain.Users | Project",
    "summary": "Namespace Project.Domain.Users Classes User Represents a domain user. UserId Represents a strongly-typed identifier for the User aggregate."
  },
  "api/Project.Infrastructure.Database.ApplicationDbContext.html": {
    "href": "api/Project.Infrastructure.Database.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | Project",
    "summary": "Class ApplicationDbContext Namespace Project.Infrastructure.Database Assembly Project.Infrastructure.dll Represents the Entity Framework Core database context for the application, integrating with ASP.NET Identity and custom domain configurations. public class ApplicationDbContext : IdentityDbContext<IdentityUserAdapter>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityDbContext<IdentityUserAdapter, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>> IdentityDbContext<IdentityUserAdapter, IdentityRole, string> IdentityDbContext<IdentityUserAdapter> ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<IdentityUserAdapter, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityDbContext<IdentityUserAdapter, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.UserRoles IdentityDbContext<IdentityUserAdapter, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.Roles IdentityDbContext<IdentityUserAdapter, IdentityRole, string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>.RoleClaims IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.OnModelCreating(ModelBuilder) IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.Users IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserClaims IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserLogins IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.UserTokens IdentityUserContext<IdentityUserAdapter, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>>.SchemaVersion DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) Represents the Entity Framework Core database context for the application, integrating with ASP.NET Identity and custom domain configurations. public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Methods OnModelCreating(ModelBuilder) Configures the entity models and applies all configurations found in the assembly. protected override void OnModelCreating(ModelBuilder builder) Parameters builder ModelBuilder The model builder used to configure entity mappings."
  },
  "api/Project.Infrastructure.Database.html": {
    "href": "api/Project.Infrastructure.Database.html",
    "title": "Namespace Project.Infrastructure.Database | Project",
    "summary": "Namespace Project.Infrastructure.Database Classes ApplicationDbContext Represents the Entity Framework Core database context for the application, integrating with ASP.NET Identity and custom domain configurations."
  },
  "api/Project.Infrastructure.Domain.Users.UserRepository.html": {
    "href": "api/Project.Infrastructure.Domain.Users.UserRepository.html",
    "title": "Class UserRepository | Project",
    "summary": "Class UserRepository Namespace Project.Infrastructure.Domain.Users Assembly Project.Infrastructure.dll Provides an implementation of IUserRepository using Entity Framework Core and ASP.NET Identity. public class UserRepository : IUserRepository Inheritance object UserRepository Implements IUserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserRepository(UserManager<IdentityUserAdapter>, ApplicationDbContext) Provides an implementation of IUserRepository using Entity Framework Core and ASP.NET Identity. public UserRepository(UserManager<IdentityUserAdapter> userManager, ApplicationDbContext applicationDbContext) Parameters userManager UserManager<IdentityUserAdapter> applicationDbContext ApplicationDbContext Methods CheckPassowrd(User, string) Validates the provided password against the stored credentials for the specified user. public Task<bool> CheckPassowrd(User user, string password) Parameters user User The user to validate. password string The plain-text password to check. Returns Task<bool> true if the password is valid; otherwise, false. CreateAsync(User, string) Creates a new user with the specified password. public Task<IdentityResult> CreateAsync(User user, string password) Parameters user User The user to create. password string The user's password. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. DeleteAsync(UserId) Deletes a user by their unique identifier. public Task<IdentityResult> DeleteAsync(UserId userId) Parameters userId UserId The identifier of the user to delete. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation. GetByEmailAsync(string) Retrieves a user by email address. public Task<User?> GetByEmailAsync(string email) Parameters email string The email address to search for. Returns Task<User> The user if found; otherwise, null. GetByIdAsync(UserId) Retrieves a user by their unique identifier. public Task<User?> GetByIdAsync(UserId userId) Parameters userId UserId The user's unique identifier. Returns Task<User> The user if found; otherwise, null. GetUserByUsernameAsync(string) Retrieves a user by their username. public Task<User?> GetUserByUsernameAsync(string username) Parameters username string The username to search for. Returns Task<User> The user if found; otherwise, null. UpdateAsync(User) Updates an existing user. public Task<IdentityResult> UpdateAsync(User user) Parameters user User The user with updated data. Returns Task<IdentityResult> An IdentityResult indicating the result of the operation."
  },
  "api/Project.Infrastructure.Domain.Users.html": {
    "href": "api/Project.Infrastructure.Domain.Users.html",
    "title": "Namespace Project.Infrastructure.Domain.Users | Project",
    "summary": "Namespace Project.Infrastructure.Domain.Users Classes UserRepository Provides an implementation of IUserRepository using Entity Framework Core and ASP.NET Identity."
  },
  "api/Project.Infrastructure.InfrastructureServices.html": {
    "href": "api/Project.Infrastructure.InfrastructureServices.html",
    "title": "Class InfrastructureServices | Project",
    "summary": "Class InfrastructureServices Namespace Project.Infrastructure Assembly Project.Infrastructure.dll Provides extension methods to register infrastructure services in the dependency injection container. public static class InfrastructureServices Inheritance object InfrastructureServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInfrastructureServices(IServiceCollection, IConfiguration) Adds infrastructure layer services including database context and repositories to the dependency injection container. public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The IServiceCollection to add services to. configuration IConfiguration The IConfiguration instance used to access configuration values. Returns IServiceCollection The updated IServiceCollection."
  },
  "api/Project.Infrastructure.Migrations.Init.html": {
    "href": "api/Project.Infrastructure.Migrations.Init.html",
    "title": "Class Init | Project",
    "summary": "Class Init Namespace Project.Infrastructure.Migrations Assembly Project.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationDbContext))] [Migration(\"20250812001619_Init\")] public class Init : Migration Inheritance object Migration Init Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Project.Infrastructure.Migrations.html": {
    "href": "api/Project.Infrastructure.Migrations.html",
    "title": "Namespace Project.Infrastructure.Migrations | Project",
    "summary": "Namespace Project.Infrastructure.Migrations Classes Init A base class inherited by each EF Core migration."
  },
  "api/Project.Infrastructure.SeedWork.StronglyTypedIdValueConverterSelector.html": {
    "href": "api/Project.Infrastructure.SeedWork.StronglyTypedIdValueConverterSelector.html",
    "title": "Class StronglyTypedIdValueConverterSelector | Project",
    "summary": "Class StronglyTypedIdValueConverterSelector Namespace Project.Infrastructure.SeedWork Assembly Project.Infrastructure.dll public class StronglyTypedIdValueConverterSelector : ValueConverterSelector, IValueConverterSelector Inheritance object ValueConverterSelector StronglyTypedIdValueConverterSelector Implements IValueConverterSelector Inherited Members ValueConverterSelector.Dependencies object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StronglyTypedIdValueConverterSelector(ValueConverterSelectorDependencies) public StronglyTypedIdValueConverterSelector(ValueConverterSelectorDependencies dependencies) Parameters dependencies ValueConverterSelectorDependencies Methods Select(Type, Type?) Returns the list of ValueConverter instances that can be used to convert the given model type. Converters nearer the front of the list should be used in preference to converters nearer the end. public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type? providerClrType = null) Parameters modelClrType Type The type for which a converter is needed. providerClrType Type The database provider type to target, or null for any. Returns IEnumerable<ValueConverterInfo> The converters available."
  },
  "api/Project.Infrastructure.SeedWork.TypedIdValueConverter-1.html": {
    "href": "api/Project.Infrastructure.SeedWork.TypedIdValueConverter-1.html",
    "title": "Class TypedIdValueConverter<TTypedIdValue> | Project",
    "summary": "Class TypedIdValueConverter<TTypedIdValue> Namespace Project.Infrastructure.SeedWork Assembly Project.Infrastructure.dll public class TypedIdValueConverter<TTypedIdValue> : ValueConverter<TTypedIdValue, Guid> where TTypedIdValue : TypedIdValueBase Type Parameters TTypedIdValue Inheritance object ValueConverter ValueConverter<TTypedIdValue, Guid> TypedIdValueConverter<TTypedIdValue> Inherited Members ValueConverter<TTypedIdValue, Guid>.ConvertToProvider ValueConverter<TTypedIdValue, Guid>.ConvertFromProvider ValueConverter<TTypedIdValue, Guid>.ConvertToProviderTyped ValueConverter<TTypedIdValue, Guid>.ConvertFromProviderTyped ValueConverter<TTypedIdValue, Guid>.ConvertToProviderExpression ValueConverter<TTypedIdValue, Guid>.ConvertFromProviderExpression ValueConverter<TTypedIdValue, Guid>.ModelClrType ValueConverter<TTypedIdValue, Guid>.ProviderClrType ValueConverter<TTypedIdValue, Guid>.ConstructorExpression ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls ValueConverter.ConstructorExpression object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TypedIdValueConverter(ConverterMappingHints?) public TypedIdValueConverter(ConverterMappingHints? mappingHints = null) Parameters mappingHints ConverterMappingHints"
  },
  "api/Project.Infrastructure.SeedWork.html": {
    "href": "api/Project.Infrastructure.SeedWork.html",
    "title": "Namespace Project.Infrastructure.SeedWork | Project",
    "summary": "Namespace Project.Infrastructure.SeedWork Classes StronglyTypedIdValueConverterSelector TypedIdValueConverter<TTypedIdValue>"
  },
  "api/Project.Infrastructure.Users.IdentityUserAdapter.html": {
    "href": "api/Project.Infrastructure.Users.IdentityUserAdapter.html",
    "title": "Class IdentityUserAdapter | Project",
    "summary": "Class IdentityUserAdapter Namespace Project.Infrastructure.Users Assembly Project.Infrastructure.dll public class IdentityUserAdapter : IdentityUser Inheritance object IdentityUser<string> IdentityUser IdentityUserAdapter Inherited Members IdentityUser<string>.ToString() IdentityUser<string>.Id IdentityUser<string>.UserName IdentityUser<string>.NormalizedUserName IdentityUser<string>.Email IdentityUser<string>.NormalizedEmail IdentityUser<string>.EmailConfirmed IdentityUser<string>.PasswordHash IdentityUser<string>.SecurityStamp IdentityUser<string>.ConcurrencyStamp IdentityUser<string>.PhoneNumber IdentityUser<string>.PhoneNumberConfirmed IdentityUser<string>.TwoFactorEnabled IdentityUser<string>.LockoutEnd IdentityUser<string>.LockoutEnabled IdentityUser<string>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FirstName public string FirstName { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string Methods FromDomain(User) public static IdentityUserAdapter FromDomain(User user) Parameters user User Returns IdentityUserAdapter ToDomain() public User ToDomain() Returns User"
  },
  "api/Project.Infrastructure.Users.html": {
    "href": "api/Project.Infrastructure.Users.html",
    "title": "Namespace Project.Infrastructure.Users | Project",
    "summary": "Namespace Project.Infrastructure.Users Classes IdentityUserAdapter"
  },
  "api/Project.Infrastructure.html": {
    "href": "api/Project.Infrastructure.html",
    "title": "Namespace Project.Infrastructure | Project",
    "summary": "Namespace Project.Infrastructure Classes InfrastructureServices Provides extension methods to register infrastructure services in the dependency injection container."
  },
  "api/Project.Tests.UnitTest1.html": {
    "href": "api/Project.Tests.UnitTest1.html",
    "title": "Class UnitTest1 | Project",
    "summary": "Class UnitTest1 Namespace Project.Tests Assembly Project.Tests.dll public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Test1() [Fact] public void Test1()"
  },
  "api/Project.Tests.html": {
    "href": "api/Project.Tests.html",
    "title": "Namespace Project.Tests | Project",
    "summary": "Namespace Project.Tests Classes UnitTest1"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Project",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Project",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Project",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}